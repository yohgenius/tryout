["6b4dfcef2a69a06fe72ae0fff02acbd053c5806e","52443341593454c14056b3f2b8d7ce8f3cc5031f",["ColorPropType","React","prop-types","StyleSheet","StyleSheetPropType","ViewPropTypes","ViewStylePropTypes","processColor","requireNativeComponent"],[83,121,160,200,248,299,350,401,455],{"version":3,"sources":["/TryOut/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js"],"names":["ColorPropType","require","React","ReactPropTypes","StyleSheet","StyleSheetPropType","ViewPropTypes","ViewStylePropTypes","processColor","requireNativeComponent","REF_PICKER","MODE_DROPDOWN","pickerStyleType","color","PickerAndroid","props","context","state","_stateFromProps","initialSelectedIndex","selectedIndex","nextProps","setState","Picker","mode","DropdownPicker","DialogPicker","nativeProps","enabled","items","onSelect","_onChange","prompt","selected","testID","style","styles","pickerAndroid","accessibilityLabel","_lastNativePosition","refs","setNativeProps","Component","propTypes","selectedValue","any","bool","oneOf","onValueChange","func","string","Children","map","children","child","index","value","childProps","label","event","position","nativeEvent","toArray","forceUpdate","create","height","cfg","nativeOnly","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PickerAndroid\n * @flow\n */\n\n'use strict';\n\nvar ColorPropType = require('ColorPropType');\nvar React = require('React');\nvar ReactPropTypes = require('prop-types');\nvar StyleSheet = require('StyleSheet');\nvar StyleSheetPropType = require('StyleSheetPropType');\nconst ViewPropTypes = require('ViewPropTypes');\nvar ViewStylePropTypes = require('ViewStylePropTypes');\n\nvar processColor = require('processColor');\nvar requireNativeComponent = require('requireNativeComponent');\n\nvar REF_PICKER = 'picker';\nvar MODE_DROPDOWN = 'dropdown';\n\nvar pickerStyleType = StyleSheetPropType({\n  ...ViewStylePropTypes,\n  color: ColorPropType,\n});\n\ntype Event = Object;\n\n/**\n * Not exposed as a public API - use <Picker> instead.\n */\nclass PickerAndroid extends React.Component {\n  props: {\n    style?: $FlowFixMe,\n    selectedValue?: any,\n    enabled?: boolean,\n    mode?: 'dialog' | 'dropdown',\n    onValueChange?: Function,\n    prompt?: string,\n    testID?: string,\n  };\n\n  state: *;\n\n  static propTypes = {\n    ...ViewPropTypes,\n    style: pickerStyleType,\n    selectedValue: ReactPropTypes.any,\n    enabled: ReactPropTypes.bool,\n    mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),\n    onValueChange: ReactPropTypes.func,\n    prompt: ReactPropTypes.string,\n    testID: ReactPropTypes.string,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    var state = this._stateFromProps(props);\n\n    this.state = {\n      ...state,\n      initialSelectedIndex: state.selectedIndex,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState(this._stateFromProps(nextProps));\n  }\n\n  // Translate prop and children into stuff that the native picker understands.\n  _stateFromProps = (props) => {\n    var selectedIndex = 0;\n    const items = React.Children.map(props.children, (child, index) => {\n      if (child.props.value === props.selectedValue) {\n        selectedIndex = index;\n      }\n      const childProps = {\n        value: child.props.value,\n        label: child.props.label,\n      };\n      if (child.props.color) {\n        childProps.color = processColor(child.props.color);\n      }\n      return childProps;\n    });\n    return {selectedIndex, items};\n  };\n\n  render() {\n    var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;\n\n    var nativeProps = {\n      enabled: this.props.enabled,\n      items: this.state.items,\n      mode: this.props.mode,\n      onSelect: this._onChange,\n      prompt: this.props.prompt,\n      selected: this.state.initialSelectedIndex,\n      testID: this.props.testID,\n      style: [styles.pickerAndroid, this.props.style],\n      accessibilityLabel: this.props.accessibilityLabel,\n    };\n\n    return <Picker ref={REF_PICKER} {...nativeProps} />;\n  }\n\n  _onChange = (event: Event) => {\n    if (this.props.onValueChange) {\n      var position = event.nativeEvent.position;\n      if (position >= 0) {\n        var children = React.Children.toArray(this.props.children);\n        var value = children[position].props.value;\n        this.props.onValueChange(value, position);\n      } else {\n        this.props.onValueChange(null, position);\n      }\n    }\n    this._lastNativePosition = event.nativeEvent.position;\n    this.forceUpdate();\n  };\n\n  componentDidMount() {\n    this._lastNativePosition = this.state.initialSelectedIndex;\n  }\n\n  componentDidUpdate() {\n    // The picker is a controlled component. This means we expect the\n    // on*Change handlers to be in charge of updating our\n    // `selectedValue` prop. That way they can also\n    // disallow/undo/mutate the selection of certain values. In other\n    // words, the embedder of this component should be the source of\n    // truth, not the native component.\n    if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {\n      this.refs[REF_PICKER].setNativeProps({selected: this.state.selectedIndex});\n      this._lastNativePosition = this.state.selectedIndex;\n    }\n  }\n}\n\nvar styles = StyleSheet.create({\n  pickerAndroid: {\n    // The picker will conform to whatever width is given, but we do\n    // have to set the component's height explicitly on the\n    // surrounding view to ensure it gets rendered.\n    // TODO would be better to export a native constant for this,\n    // like in iOS the RCTDatePickerManager.m\n    height: 50,\n  },\n});\n\nvar cfg = {\n  nativeOnly: {\n    items: true,\n    selected: true,\n  }\n};\n\nvar DropdownPicker = requireNativeComponent('AndroidDropdownPicker', PickerAndroid, cfg);\nvar DialogPicker = requireNativeComponent('AndroidDialogPicker', PickerAndroid, cfg);\n\nmodule.exports = PickerAndroid;\n"]}]