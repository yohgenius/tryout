["854ec93932bfaeca5b1c943fb41297f994e41870","175deeb6c2a452430aa4f4c55f6f225745f4a0b8",["MissingNativeEventEmitterShim","NativeEventEmitter","NativeModules","convertRequestBody"],[60,127,184,246],{"version":3,"sources":["/TryOut/node_modules/react-native/Libraries/Network/RCTNetworking.android.js"],"names":["MissingNativeEventEmitterShim","require","NativeEventEmitter","RCTNetworkingNative","Networking","convertRequestBody","convertHeadersMapToArray","headers","headerArray","name","push","_requestId","generateRequestId","RCTNetworking","isAvailable","method","trackingName","url","data","responseType","incrementalUpdates","timeout","callback","withCredentials","body","formData","map","part","requestId","sendRequest","abortRequest","clearCookies","__DEV__","MissingNativeRCTNetworkingShim","throwMissingNativeModule","module","exports"],"mappings":";AAWA;;AAIA,IAAMA,gCAAgCC,OAAhC,iCAAN;AACA,IAAMC,qBAAqBD,OAArB,sBAAN;AACA,IAAME,sBAAsBF,yBAAyBG,UAArD;AACA,IAAMC,qBAAqBJ,OAArB,sBAAN;;AAQA,SAASK,wBAAT,CAAkCC,OAAlC,EAAkE;AAChE,MAAMC,cAAc,EAApB;AACA,OAAK,IAAMC,IAAX,IAAmBF,OAAnB,EAA4B;AAC1BC,gBAAYE,IAAZ,CAAiB,CAACD,IAAD,EAAOF,QAAQE,IAAR,CAAP,CAAjB;AACD;AACD,SAAOD,WAAP;AACD;;AAED,IAAIG,aAAa,CAAjB;AACA,SAASC,iBAAT,GAAqC;AACnC,SAAOD,YAAP;AACD;;IAMKE,a;;;AAIJ,2BAAc;AAAA;;AAAA,0IACNV,mBADM;;AAAA,UAFdW,WAEc,GAFS,IAET;AAAA;AAEb;;;;gCAGCC,M,EACAC,Y,EACAC,G,EACAV,O,EACAW,I,EACAC,Y,EACAC,kB,EACAC,O,EACAC,Q,EACAC,e,EACA;AACA,UAAMC,OAAOnB,mBAAmBa,IAAnB,CAAb;AACA,UAAIM,QAAQA,KAAKC,QAAjB,EAA2B;AACzBD,aAAKC,QAAL,GAAgBD,KAAKC,QAAL,CAAcC,GAAd,CAAkB,UAACC,IAAD;AAAA,0CAC7BA,IAD6B;AAEhCpB,qBAASD,yBAAyBqB,KAAKpB,OAA9B;AAFuB;AAAA,SAAlB,CAAhB;AAID;AACD,UAAMqB,YAAYhB,mBAAlB;AACAT,0BAAoB0B,WAApB,CACEd,MADF,EAEEE,GAFF,EAGEW,SAHF,EAIEtB,yBAAyBC,OAAzB,CAJF,2BAKMiB,IALN,IAKYR,0BALZ,KAMEG,YANF,EAOEC,kBAPF,EAQEC,OARF,EASEE,eATF;AAWAD,eAASM,SAAT;AACD;;;iCAEYA,S,EAAmB;AAC9BzB,0BAAoB2B,YAApB,CAAiCF,SAAjC;AACD;;;iCAEYN,Q,EAAoC;AAC/CnB,0BAAoB4B,YAApB,CAAiCT,QAAjC;AACD;;;EAhDyBpB,kB;;AAmD5B,IAAI8B,WAAW,CAAC7B,mBAAhB,EAAqC;AAAA,MAC7B8B,8BAD6B;AAAA;;AAEjC,8CAAc;AAAA;AAAA,yKACN,aADM,EACS,UADT;AAEb;;AAJgC;AAAA;AAAA,oCAMA;AAC/B,aAAKC,wBAAL;AACD;AARgC;AAAA;AAAA,qCAUC;AAChC,aAAKA,wBAAL;AACD;AAZgC;AAAA;AAAA,qCAcC;AAChC,aAAKA,wBAAL;AACD;AAhBgC;AAAA;AAAA,IACUlC,6BADV;;AAsBnCa,kBAAgB,IAAIoB,8BAAJ,EAAhB;AACD,CAvBD,MAuBO;AACLpB,kBAAgB,IAAIA,aAAJ,EAAhB;AACD;;AAEDsB,OAAOC,OAAP,GAAiBvB,aAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RCTNetworking\n * @flow\n */\n'use strict';\n\n// Do not require the native RCTNetworking module directly! Use this wrapper module instead.\n// It will add the necessary requestId, so that you don't have to generate it yourself.\nconst MissingNativeEventEmitterShim = require('MissingNativeEventEmitterShim');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTNetworkingNative = require('NativeModules').Networking;\nconst convertRequestBody = require('convertRequestBody');\n\nimport type {RequestBody} from 'convertRequestBody';\n\ntype Header = [string, string];\n\n// Convert FormData headers to arrays, which are easier to consume in\n// native on Android.\nfunction convertHeadersMapToArray(headers: Object): Array<Header> {\n  const headerArray = [];\n  for (const name in headers) {\n    headerArray.push([name, headers[name]]);\n  }\n  return headerArray;\n}\n\nlet _requestId = 1;\nfunction generateRequestId(): number {\n  return _requestId++;\n}\n\n/**\n * This class is a wrapper around the native RCTNetworking module. It adds a necessary unique\n * requestId to each network request that can be used to abort that request later on.\n */\nclass RCTNetworking extends NativeEventEmitter {\n\n  isAvailable: boolean = true;\n\n  constructor() {\n    super(RCTNetworkingNative);\n  }\n\n  sendRequest(\n    method: string,\n    trackingName: string,\n    url: string,\n    headers: Object,\n    data: RequestBody,\n    responseType: 'text' | 'base64',\n    incrementalUpdates: boolean,\n    timeout: number,\n    callback: (requestId: number) => any,\n    withCredentials: boolean\n  ) {\n    const body = convertRequestBody(data);\n    if (body && body.formData) {\n      body.formData = body.formData.map((part) => ({\n        ...part,\n        headers: convertHeadersMapToArray(part.headers),\n      }));\n    }\n    const requestId = generateRequestId();\n    RCTNetworkingNative.sendRequest(\n      method,\n      url,\n      requestId,\n      convertHeadersMapToArray(headers),\n      {...body, trackingName},\n      responseType,\n      incrementalUpdates,\n      timeout,\n      withCredentials\n    );\n    callback(requestId);\n  }\n\n  abortRequest(requestId: number) {\n    RCTNetworkingNative.abortRequest(requestId);\n  }\n\n  clearCookies(callback: (result: boolean) => any) {\n    RCTNetworkingNative.clearCookies(callback);\n  }\n}\n\nif (__DEV__ && !RCTNetworkingNative) {\n  class MissingNativeRCTNetworkingShim extends MissingNativeEventEmitterShim {\n    constructor() {\n      super('RCTAppState', 'AppState');\n    }\n\n    sendRequest(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    abortRequest(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    clearCookies(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n  }\n\n  // This module depends on the native `RCTNetworkingNative` module. If you don't include it,\n  // `RCTNetworking.isAvailable` will return `false`, and any method calls will throw.\n  // We reassign the class variable to keep the autodoc generator happy.\n  RCTNetworking = new MissingNativeRCTNetworkingShim();\n} else {\n  RCTNetworking = new RCTNetworking();\n}\n\nmodule.exports = RCTNetworking;\n"]}]