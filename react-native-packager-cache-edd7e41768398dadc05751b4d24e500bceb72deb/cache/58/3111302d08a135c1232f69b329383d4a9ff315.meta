["08e745de729e25371f92851d7719f02151fa0b2c","3b6249f8d4459288b6ce7ab81295ac5b2c4085c6",["EventEmitter","EventSubscriptionVendor","StatusBarIOS","Keyboard","AppState"],[43,98,991,1195,1419],{"version":3,"sources":["/TryOut/node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"],"names":["EventEmitter","require","EventSubscriptionVendor","RCTDeviceEventEmitter","sharedSubscriber","eventType","lastIndexOf","console","warn","listener","context","eventModule","_nativeEventModule","addListener","removeAllListeners","subscription","emitter","removeSubscription","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,eAAeC,OAAf,gBAAN;AACA,IAAMC,0BAA0BD,OAA1B,2BAAN;;IAQME,qB;;;AAIJ,mCAAc;AAAA;;AACZ,QAAMC,mBAAmB,IAAIF,uBAAJ,EAAzB;;AADY,0JAENE,gBAFM;;AAGZ,UAAKA,gBAAL,GAAwBA,gBAAxB;AAHY;AAIb;;;;uCAEkBC,S,EAAoB;AACrC,UAAIA,SAAJ,EAAe;AACb,YAAIA,UAAUC,WAAV,CAAsB,WAAtB,EAAmC,CAAnC,MAA0C,CAA9C,EAAiD;AAC/CC,kBAAQC,IAAR,CAAa,6DAAb,EAA4EH,SAA5E;AACA,iBAAOJ,OAAP;AACD;AACD,YAAII,UAAUC,WAAV,CAAsB,UAAtB,EAAkC,CAAlC,MAAyC,CAA7C,EAAgD;AAC9CC,kBAAQC,IAAR,CAAa,yDAAb,EAAwEH,SAAxE;AACA,iBAAOJ,OAAP;AACD;AACD,YAAII,cAAc,mBAAd,IAAqCA,cAAc,eAAvD,EAAwE;AACtEE,kBAAQC,IAAR,CAAa,yDAAb,EAAwEH,SAAxE;AACA,iBAAOJ,OAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;;gCAEWI,S,EAAmBI,Q,EAAoBC,O,EAAuC;AACxF,UAAMC,cAAc,KAAKC,kBAAL,CAAwBP,SAAxB,CAApB;AACA,aAAOM,cAAcA,YAAYE,WAAZ,CAAwBR,SAAxB,EAAmCI,QAAnC,EAA6CC,OAA7C,CAAd,yJACgCL,SADhC,EAC2CI,QAD3C,EACqDC,OADrD,CAAP;AAED;;;uCAEkBL,S,EAAoB;AACrC,UAAMM,cAAc,KAAKC,kBAAL,CAAwBP,SAAxB,CAApB;AACCM,qBAAeN,SAAhB,GAA6BM,YAAYG,kBAAZ,CAA+BT,SAA/B,CAA7B,gKACsDA,SADtD;AAED;;;uCAEkBU,Y,EAAmC;AACpD,UAAIA,aAAaC,OAAb,KAAyB,IAA7B,EAAmC;AACjCD,qBAAaC,OAAb,CAAqBC,kBAArB,CAAwCF,YAAxC;AACD,OAFD,MAEO;AACL,qKAAyBA,YAAzB;AACD;AACF;;;EA9CiCf,Y;;AAiDpCkB,OAAOC,OAAP,GAAiB,IAAIhB,qBAAJ,EAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RCTDeviceEventEmitter\n * @flow\n */\n'use strict';\n\nconst EventEmitter = require('EventEmitter');\nconst EventSubscriptionVendor = require('EventSubscriptionVendor');\n\nimport type EmitterSubscription from 'EmitterSubscription';\n\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\nclass RCTDeviceEventEmitter extends EventEmitter {\n\n  sharedSubscriber: EventSubscriptionVendor;\n\n  constructor() {\n    const sharedSubscriber = new EventSubscriptionVendor();\n    super(sharedSubscriber);\n    this.sharedSubscriber = sharedSubscriber;\n  }\n\n  _nativeEventModule(eventType: ?string) {\n    if (eventType) {\n      if (eventType.lastIndexOf('statusBar', 0) === 0) {\n        console.warn('`%s` event should be registered via the StatusBarIOS module', eventType);\n        return require('StatusBarIOS');\n      }\n      if (eventType.lastIndexOf('keyboard', 0) === 0) {\n        console.warn('`%s` event should be registered via the Keyboard module', eventType);\n        return require('Keyboard');\n      }\n      if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n        console.warn('`%s` event should be registered via the AppState module', eventType);\n        return require('AppState');\n      }\n    }\n    return null;\n  }\n\n  addListener(eventType: string, listener: Function, context: ?Object): EmitterSubscription {\n    const eventModule = this._nativeEventModule(eventType);\n    return eventModule ? eventModule.addListener(eventType, listener, context)\n                       : super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: ?string) {\n    const eventModule = this._nativeEventModule(eventType);\n    (eventModule && eventType) ? eventModule.removeAllListeners(eventType)\n                               : super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nmodule.exports = new RCTDeviceEventEmitter();\n"]}]