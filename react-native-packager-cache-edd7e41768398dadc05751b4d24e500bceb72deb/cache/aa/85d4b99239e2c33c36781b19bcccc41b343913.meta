["b2d0bd0fd578c80bab1bb40d73c8d8027a7f593f","f46b65c3cd557e50cfbb4c78f53ffab5100b5d59",["Animated","I18nManager","PanResponder","React","prop-types","StyleSheet","react-timer-mixin","View","create-react-class","fbjs/lib/emptyFunction"],[39,78,121,158,192,232,272,313,354,405],{"version":3,"sources":["/TryOut/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableRow.js"],"names":["Animated","require","I18nManager","PanResponder","React","PropTypes","StyleSheet","TimerMixin","View","createReactClass","emptyFunction","IS_RTL","isRTL","CLOSED_LEFT_POSITION","HORIZONTAL_SWIPE_DISTANCE_THRESHOLD","HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD","SLOW_SPEED_SWIPE_FACTOR","SWIPE_DURATION","ON_MOUNT_BOUNCE_DELAY","ON_MOUNT_BOUNCE_DURATION","RIGHT_SWIPE_BOUNCE_BACK_DISTANCE","RIGHT_SWIPE_BOUNCE_BACK_DURATION","RIGHT_SWIPE_THRESHOLD","SwipeableRow","displayName","_panResponder","_previousLeft","mixins","propTypes","children","any","isOpen","bool","maxSwipeDistance","number","isRequired","onOpen","func","onClose","onSwipeEnd","onSwipeStart","shouldBounceOnMount","slideoutView","node","swipeThreshold","getInitialState","currentLeft","Value","isSwipeableViewRendered","rowHeight","getDefaultProps","componentWillMount","create","onMoveShouldSetPanResponderCapture","_handleMoveShouldSetPanResponderCapture","onPanResponderGrant","_handlePanResponderGrant","onPanResponderMove","_handlePanResponderMove","onPanResponderRelease","_handlePanResponderEnd","onPanResponderTerminationRequest","_onPanResponderTerminationRequest","onPanResponderTerminate","onShouldBlockNativeResponder","event","gestureState","componentDidMount","props","setTimeout","_animateBounceBack","componentWillReceiveProps","nextProps","_animateToClosedPosition","shouldComponentUpdate","nextState","render","slideOutView","state","styles","slideOutContainer","height","swipeableView","_onSwipeableViewLayout","transform","translateX","panHandlers","close","setState","nativeEvent","layout","dy","_isValidSwipe","_isSwipingExcessivelyRightFromClosedPosition","_isSwipingRightFromClosed","_swipeSlowSpeed","_swipeFullSpeed","gestureStateDx","dx","setValue","_animateTo","toValue","duration","callback","timing","useNativeDriver","start","_animateToOpenPosition","_animateToOpenPositionWith","speed","distMoved","Math","abs","_animateToClosedPositionDuringBounce","swipeBounceBackDistance","_shouldAnimateRemainder","vx","horizontalDistance","bottom","left","position","right","top","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SwipeableRow\n * @flow\n */\n'use strict';\n\nconst Animated = require('Animated');\nconst I18nManager = require('I18nManager');\nconst PanResponder = require('PanResponder');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('StyleSheet');\nconst TimerMixin = require('react-timer-mixin');\nconst View = require('View');\n\nconst createReactClass = require('create-react-class');\nconst emptyFunction = require('fbjs/lib/emptyFunction');\n\nconst IS_RTL = I18nManager.isRTL;\n\n// NOTE: Eventually convert these consts to an input object of configurations\n\n// Position of the left of the swipable item when closed\nconst CLOSED_LEFT_POSITION = 0;\n// Minimum swipe distance before we recognize it as such\nconst HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;\n// Minimum swipe speed before we fully animate the user's action (open/close)\nconst HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;\n// Factor to divide by to get slow speed; i.e. 4 means 1/4 of full speed\nconst SLOW_SPEED_SWIPE_FACTOR = 4;\n// Time, in milliseconds, of how long the animated swipe should be\nconst SWIPE_DURATION = 300;\n\n/**\n * On SwipeableListView mount, the 1st item will bounce to show users it's\n * possible to swipe\n */\nconst ON_MOUNT_BOUNCE_DELAY = 700;\nconst ON_MOUNT_BOUNCE_DURATION = 400;\n\n// Distance left of closed position to bounce back when right-swiping from closed\nconst RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;\nconst RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;\n/**\n * Max distance of right swipe to allow (right swipes do functionally nothing).\n * Must be multiplied by SLOW_SPEED_SWIPE_FACTOR because gestureState.dx tracks\n * how far the finger swipes, and not the actual animation distance.\n*/\nconst RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;\n\n/**\n * Creates a swipable row that allows taps on the main item and a custom View\n * on the item hidden behind the row. Typically this should be used in\n * conjunction with SwipeableListView for additional functionality, but can be\n * used in a normal ListView. See the renderRow for SwipeableListView to see how\n * to use this component separately.\n */\nconst SwipeableRow = createReactClass({\n  displayName: 'SwipeableRow',\n  _panResponder: {},\n  _previousLeft: CLOSED_LEFT_POSITION,\n\n  mixins: [TimerMixin],\n\n  propTypes: {\n    children: PropTypes.any,\n    isOpen: PropTypes.bool,\n    maxSwipeDistance: PropTypes.number.isRequired,\n    onOpen: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onSwipeEnd: PropTypes.func.isRequired,\n    onSwipeStart: PropTypes.func.isRequired,\n    // Should bounce the row on mount\n    shouldBounceOnMount: PropTypes.bool,\n    /**\n     * A ReactElement that is unveiled when the user swipes\n     */\n    slideoutView: PropTypes.node.isRequired,\n    /**\n     * The minimum swipe distance required before fully animating the swipe. If\n     * the user swipes less than this distance, the item will return to its\n     * previous (open/close) position.\n     */\n    swipeThreshold: PropTypes.number.isRequired,\n  },\n\n  getInitialState(): Object {\n    return {\n      currentLeft: new Animated.Value(this._previousLeft),\n      /**\n       * In order to render component A beneath component B, A must be rendered\n       * before B. However, this will cause \"flickering\", aka we see A briefly\n       * then B. To counter this, _isSwipeableViewRendered flag is used to set\n       * component A to be transparent until component B is loaded.\n       */\n      isSwipeableViewRendered: false,\n      rowHeight: (null: ?number),\n    };\n  },\n\n  getDefaultProps(): Object {\n    return {\n      isOpen: false,\n      maxSwipeDistance: 0,\n      onOpen: emptyFunction,\n      onClose: emptyFunction,\n      onSwipeEnd: emptyFunction,\n      onSwipeStart: emptyFunction,\n      swipeThreshold: 30,\n    };\n  },\n\n  componentWillMount(): void {\n    this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,\n      onPanResponderGrant: this._handlePanResponderGrant,\n      onPanResponderMove: this._handlePanResponderMove,\n      onPanResponderRelease: this._handlePanResponderEnd,\n      onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,\n      onPanResponderTerminate: this._handlePanResponderEnd,\n      onShouldBlockNativeResponder: (event, gestureState) => false,\n    });\n  },\n\n  componentDidMount(): void {\n    if (this.props.shouldBounceOnMount) {\n      /**\n       * Do the on mount bounce after a delay because if we animate when other\n       * components are loading, the animation will be laggy\n       */\n      this.setTimeout(() => {\n        this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);\n      }, ON_MOUNT_BOUNCE_DELAY);\n    }\n  },\n\n  componentWillReceiveProps(nextProps: Object): void {\n    /**\n     * We do not need an \"animateOpen(noCallback)\" because this animation is\n     * handled internally by this component.\n     */\n    if (this.props.isOpen && !nextProps.isOpen) {\n      this._animateToClosedPosition();\n    }\n  },\n\n  shouldComponentUpdate(nextProps: Object, nextState: Object): boolean {\n    if (this.props.shouldBounceOnMount && !nextProps.shouldBounceOnMount) {\n      // No need to rerender if SwipeableListView is disabling the bounce flag\n      return false;\n    }\n\n    return true;\n  },\n\n  render(): React.Element<any> {\n    // The view hidden behind the main view\n    let slideOutView;\n    if (this.state.isSwipeableViewRendered && this.state.rowHeight) {\n      slideOutView = (\n        <View style={[\n          styles.slideOutContainer,\n          {height: this.state.rowHeight},\n          ]}>\n          {this.props.slideoutView}\n        </View>\n      );\n    }\n\n    // The swipeable item\n    const swipeableView = (\n      <Animated.View\n        onLayout={this._onSwipeableViewLayout}\n        style={{transform: [{translateX: this.state.currentLeft}]}}>\n        {this.props.children}\n      </Animated.View>\n    );\n\n    return (\n      <View\n        {...this._panResponder.panHandlers}>\n        {slideOutView}\n        {swipeableView}\n      </View>\n    );\n  },\n\n  close(): void {\n    this.props.onClose();\n    this._animateToClosedPosition();\n  },\n\n  _onSwipeableViewLayout(event: Object): void {\n    this.setState({\n      isSwipeableViewRendered: true,\n      rowHeight: event.nativeEvent.layout.height,\n    });\n  },\n\n  _handleMoveShouldSetPanResponderCapture(\n    event: Object,\n    gestureState: Object,\n  ): boolean {\n    // Decides whether a swipe is responded to by this component or its child\n    return gestureState.dy < 10 && this._isValidSwipe(gestureState);\n  },\n\n  _handlePanResponderGrant(event: Object, gestureState: Object): void {\n\n  },\n\n  _handlePanResponderMove(event: Object, gestureState: Object): void {\n    if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {\n      return;\n    }\n\n    this.props.onSwipeStart();\n\n    if (this._isSwipingRightFromClosed(gestureState)) {\n      this._swipeSlowSpeed(gestureState);\n    } else {\n      this._swipeFullSpeed(gestureState);\n    }\n  },\n\n  _isSwipingRightFromClosed(gestureState: Object): boolean {\n    const gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;\n    return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;\n  },\n\n  _swipeFullSpeed(gestureState: Object): void {\n    this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);\n  },\n\n  _swipeSlowSpeed(gestureState: Object): void {\n    this.state.currentLeft.setValue(\n      this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR,\n    );\n  },\n\n  _isSwipingExcessivelyRightFromClosedPosition(gestureState: Object): boolean {\n    /**\n     * We want to allow a BIT of right swipe, to allow users to know that\n     * swiping is available, but swiping right does not do anything\n     * functionally.\n     */\n    const gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;\n    return (\n      this._isSwipingRightFromClosed(gestureState) &&\n      gestureStateDx > RIGHT_SWIPE_THRESHOLD\n    );\n  },\n\n  _onPanResponderTerminationRequest(\n    event: Object,\n    gestureState: Object,\n  ): boolean {\n    return false;\n  },\n\n  _animateTo(\n    toValue: number,\n    duration: number = SWIPE_DURATION,\n    callback: Function = emptyFunction,\n  ): void {\n    Animated.timing(\n      this.state.currentLeft,\n      {\n        duration,\n        toValue,\n        useNativeDriver: true,\n      },\n    ).start(() => {\n      this._previousLeft = toValue;\n      callback();\n    });\n  },\n\n  _animateToOpenPosition(): void {\n    const maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;\n    this._animateTo(-maxSwipeDistance);\n  },\n\n  _animateToOpenPositionWith(\n    speed: number,\n    distMoved: number,\n  ): void {\n    /**\n     * Ensure the speed is at least the set speed threshold to prevent a slow\n     * swiping animation\n     */\n    speed = (\n      speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ?\n      speed :\n      HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD\n    );\n    /**\n     * Calculate the duration the row should take to swipe the remaining distance\n     * at the same speed the user swiped (or the speed threshold)\n     */\n    const duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);\n    const maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;\n    this._animateTo(-maxSwipeDistance, duration);\n  },\n\n  _animateToClosedPosition(duration: number = SWIPE_DURATION): void {\n    this._animateTo(CLOSED_LEFT_POSITION, duration);\n  },\n\n  _animateToClosedPositionDuringBounce(): void {\n    this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);\n  },\n\n  _animateBounceBack(duration: number): void {\n    /**\n     * When swiping right, we want to bounce back past closed position on release\n     * so users know they should swipe right to get content.\n     */\n    const swipeBounceBackDistance = IS_RTL ?\n      -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE :\n      RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;\n    this._animateTo(\n      -swipeBounceBackDistance,\n      duration,\n      this._animateToClosedPositionDuringBounce,\n    );\n  },\n\n  // Ignore swipes due to user's finger moving slightly when tapping\n  _isValidSwipe(gestureState: Object): boolean {\n    return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;\n  },\n\n  _shouldAnimateRemainder(gestureState: Object): boolean {\n    /**\n     * If user has swiped past a certain distance, animate the rest of the way\n     * if they let go\n     */\n    return (\n      Math.abs(gestureState.dx) > this.props.swipeThreshold ||\n      gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD\n    );\n  },\n\n  _handlePanResponderEnd(event: Object, gestureState: Object): void {\n    const horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;\n    if (this._isSwipingRightFromClosed(gestureState)) {\n      this.props.onOpen();\n      this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);\n    } else if (this._shouldAnimateRemainder(gestureState)) {\n      if (horizontalDistance < 0) {\n        // Swiped left\n        this.props.onOpen();\n        this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);\n      } else {\n        // Swiped right\n        this.props.onClose();\n        this._animateToClosedPosition();\n      }\n    } else {\n      if (this._previousLeft === CLOSED_LEFT_POSITION) {\n        this._animateToClosedPosition();\n      } else {\n        this._animateToOpenPosition();\n      }\n    }\n\n    this.props.onSwipeEnd();\n  },\n});\n\nconst styles = StyleSheet.create({\n  slideOutContainer: {\n    bottom: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n  },\n});\n\nmodule.exports = SwipeableRow;\n"]}]