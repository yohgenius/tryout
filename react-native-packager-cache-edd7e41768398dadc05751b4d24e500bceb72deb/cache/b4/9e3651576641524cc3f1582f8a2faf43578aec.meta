["7fb5ceb915c30e92ef9398e72eabaaca8f270551","7583755ec4a49b5a3a2145cf1b0db68c924ec8c9",["pretty-format","uuid-js","./Constants","./lib/Queue","regenerator-runtime"],[201,315,414,519,628],{"version":3,"sources":["/TryOut/node_modules/expo/src/Logs.js"],"names":["enableXDELogging","disableXDELogging","logQueue","logCounter","sessionId","create","toString","isSendingLogs","groupDepth","replaceConsoleFunction","originalGroup","console","group","args","apply","queueRemoteLog","__restore","originalGroupCollapsed","groupCollapsed","originalGroupEnd","groupEnd","shouldHide","originalAssert","assert","assertion","errorString","log","debug","info","warn","error","sendRemoteLogsAsync","logs","currentLog","dequeue","push","fetch","manifest","logUrl","method","headers","Connection","Accept","deviceId","deviceName","body","JSON","stringify","level","additionalFields","map","stringifiedArgs","arg","enqueue","count","originalArgs","consoleFunc","original","newConsoleFunc","navigator","userAgent"],"mappings":"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","sourcesContent":["'use strict';\n\nimport prettyFormat from 'pretty-format';\nimport UUID from 'uuid-js';\n\nimport Constants from './Constants';\nimport Queue from './lib/Queue';\n\nlet logQueue = new Queue();\nlet logCounter = 0;\nlet sessionId = UUID.create().toString();\nlet isSendingLogs = false;\nlet groupDepth = 0;\n\nexport function enableXDELogging() {\n  // don't use level below info. only use debug for things that\n  // shouldn't be shown to the developer.\n  replaceConsoleFunction('log', 'info');\n  replaceConsoleFunction('debug', 'info');\n  replaceConsoleFunction('info', 'info');\n  replaceConsoleFunction('warn', 'warn');\n  replaceConsoleFunction('error', 'error');\n\n  // console.group\n  let originalGroup = console.group;\n  console.group = function(...args) {\n    if (originalGroup) {\n      originalGroup.apply(console, args);\n    }\n\n    queueRemoteLog('info', {}, args);\n    groupDepth++;\n  };\n  console.group.__restore = function() {\n    console.group = originalGroup;\n  };\n\n  let originalGroupCollapsed = console.groupCollapsed;\n  console.groupCollapsed = function(...args) {\n    if (originalGroupCollapsed) {\n      originalGroupCollapsed.apply(console, args);\n    }\n\n    queueRemoteLog(\n      'info',\n      {\n        groupCollapsed: true,\n      },\n      args\n    );\n    groupDepth++;\n  };\n  console.groupCollapsed.__restore = function() {\n    console.groupCollapsed = originalGroupCollapsed;\n  };\n\n  let originalGroupEnd = console.groupEnd;\n  console.groupEnd = function(...args) {\n    if (originalGroupEnd) {\n      originalGroupEnd.apply(console, args);\n    }\n\n    if (groupDepth > 0) {\n      groupDepth--;\n    }\n    queueRemoteLog(\n      'info',\n      {\n        shouldHide: true,\n      },\n      args\n    );\n  };\n  console.groupEnd.__restore = function() {\n    console.groupEnd = originalGroupEnd;\n  };\n\n  // console.assert\n  let originalAssert = console.assert;\n  console.assert = function(assertion, errorString) {\n    if (originalAssert) {\n      originalAssert.apply(console, [assertion, errorString]);\n    }\n\n    if (!assertion) {\n      queueRemoteLog('error', {}, `Assertion failed: ${errorString}`);\n    }\n  };\n  console.assert.__restore = function() {\n    console.assert = originalAssert;\n  };\n\n  // TODO: support rest of console methods\n}\n\nexport function disableXDELogging() {\n  console.log.__restore();\n  console.debug.__restore();\n  console.info.__restore();\n  console.warn.__restore();\n  console.error.__restore();\n\n  console.group.__restore();\n  console.groupCollapsed.__restore();\n  console.groupEnd.__restore();\n\n  console.assert.__restore();\n\n  // TODO: support rest of console methods\n}\n\n/** Helpers **/\n\nasync function sendRemoteLogsAsync() {\n  if (isSendingLogs) {\n    return;\n  }\n\n  let logs = [];\n  let currentLog = logQueue.dequeue();\n  if (!currentLog) {\n    return;\n  } else {\n    isSendingLogs = true;\n  }\n\n  while (currentLog) {\n    logs.push(currentLog);\n    currentLog = logQueue.dequeue();\n  }\n\n  try {\n    await fetch(Constants.manifest.logUrl, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        Connection: 'keep-alive',\n        'Proxy-Connection': 'keep-alive',\n        Accept: 'application/json',\n        'Device-Id': Constants.deviceId,\n        'Device-Name': Constants.deviceName,\n        'Session-Id': sessionId,\n      },\n      body: JSON.stringify(logs),\n    });\n  } catch (e) {}\n\n  isSendingLogs = false;\n  sendRemoteLogsAsync();\n}\n\nfunction queueRemoteLog(level, additionalFields, args) {\n  if (!args || !args.map) {\n    return;\n  }\n\n  let stringifiedArgs = args.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    } else {\n      return prettyFormat(arg);\n    }\n  });\n\n  logQueue.enqueue({\n    count: logCounter++,\n    level,\n    groupDepth,\n    body: stringifiedArgs,\n    originalArgs: args,\n    ...additionalFields,\n  });\n\n  // don't block on this\n  sendRemoteLogsAsync();\n}\n\nfunction replaceConsoleFunction(consoleFunc, level, additionalFields) {\n  const original = console[consoleFunc];\n  const newConsoleFunc = function(...args) {\n    if (original) {\n      original.apply(console, args);\n    }\n    queueRemoteLog(level, additionalFields, args);\n  };\n\n  newConsoleFunc.__restore = function() {\n    console[consoleFunc] = original;\n  };\n\n  console[consoleFunc] = newConsoleFunc;\n}\n\n// Enable by default\nif (Constants.manifest && Constants.manifest.logUrl) {\n  // Checks if the app is running in Chrome. If it is, we do not enable XDE and display a message on the XDE.\n  if (!navigator.userAgent) {\n    enableXDELogging();\n  } else {\n    queueRemoteLog('info', {}, [\n      'You are now debugging remotely, check your browser console for your application logs.',\n    ]);\n  }\n}\n"]}]