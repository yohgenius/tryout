["2a96f02e7b4abf3c5cdddad88ecd03650e62f3db","311fe6f96e354e080317c92c80b5acf88952dcd5",["react-native"],[122],{"version":3,"sources":["/TryOut/node_modules/expo/src/sensor/ThreeAxisSensor.js"],"names":["ThreeAxisSensor","nativeSensorModule","nativeEventName","_nativeModule","_nativeEmitter","_nativeEventName","getListenerCount","listeners","length","listener","OS","hasListeners","startObserving","subscription","addListener","remove","removeSubscription","stopObserving","removeAllListeners","intervalMs","setUpdateInterval"],"mappings":";;;;;AAEA;;IAoBqBA,e;AAKnB,2BAAYC,kBAAZ,EAAoDC,eAApD,EAA6E;AAAA;;AAC3E,SAAKC,aAAL,GAAqBF,kBAArB;AACA,SAAKG,cAAL,GAAsB,oCAAuBH,kBAAvB,CAAtB;AACA,SAAKI,gBAAL,GAAwBH,eAAxB;AACD;;;;mCAEuB;AACtB,aAAO,KAAKI,gBAAL,KAA0B,CAAjC;AACD;;;uCAE0B;AACzB,aAAO,KAAKF,cAAL,CAAoBG,SAApB,CAA8B,KAAKF,gBAAnC,EAAqDG,MAA5D;AACD;;;gCAEWC,Q,EAAkC;AAAA;;AAC5C,UAAI,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;AACxB,eAAKR,aAAL,CAAmBS,cAAnB;AACD;AACF;;AAED,UAAIC,eAAe,KAAKT,cAAL,CAAoBU,WAApB,CACjB,KAAKT,gBADY,EAEjBI,QAFiB,CAAnB;AAIAI,mBAAaE,MAAb,GAAsB;AAAA,eAAM,MAAKC,kBAAL,CAAwBH,YAAxB,CAAN;AAAA,OAAtB;AACA,aAAOA,YAAP;AACD;;;yCAE0B;AACzB,UAAI,sBAASH,EAAT,KAAgB,SAApB,EAA+B;AAC7B,aAAKP,aAAL,CAAmBc,aAAnB;AACD;;AAED,aAAO,KAAKb,cAAL,CAAoBc,kBAApB,CAAuC,KAAKb,gBAA5C,CAAP;AACD;;;uCAEkBQ,Y,EAAkC;AACnD,UAAI,sBAASH,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,KAAKJ,gBAAL,OAA4B,CAAhC,EAAmC;AACjC,eAAKH,aAAL,CAAmBc,aAAnB;AACD;AACF;;AAED,aAAO,KAAKb,cAAL,CAAoBY,kBAApB,CAAuCH,YAAvC,CAAP;AACD;;;sCAEiBM,U,EAA0B;AAC1C,WAAKhB,aAAL,CAAmBiB,iBAAnB,CAAqCD,UAArC;AACD;;;;;kBAtDkBnB,e","sourcesContent":["// @flow\n\nimport { NativeEventEmitter, Platform } from 'react-native';\n\ntype Measurement = {\n  x: number,\n  y: number,\n  z: number,\n};\n\ntype Listener = Measurement => void;\n\ntype Subscription = {\n  remove: () => void,\n};\n\ntype NativeSensorModule = Object;\n\n/**\n * A base class for subscribable sensors. The events emitted by this class are\n * {x, y, z} measurements.\n */\nexport default class ThreeAxisSensor {\n  _nativeModule: NativeSensorModule;\n  _nativeEmitter: NativeEventEmitter;\n  _nativeEventName: string;\n\n  constructor(nativeSensorModule: NativeSensorModule, nativeEventName: string) {\n    this._nativeModule = nativeSensorModule;\n    this._nativeEmitter = new NativeEventEmitter(nativeSensorModule);\n    this._nativeEventName = nativeEventName;\n  }\n\n  hasListeners(): boolean {\n    return this.getListenerCount() > 0;\n  }\n\n  getListenerCount(): number {\n    return this._nativeEmitter.listeners(this._nativeEventName).length;\n  }\n\n  addListener(listener: Listener): Subscription {\n    if (Platform.OS === 'android') {\n      if (!this.hasListeners()) {\n        this._nativeModule.startObserving();\n      }\n    }\n\n    let subscription = this._nativeEmitter.addListener(\n      this._nativeEventName,\n      listener\n    );\n    subscription.remove = () => this.removeSubscription(subscription);\n    return subscription;\n  }\n\n  removeAllListeners(): void {\n    if (Platform.OS === 'android') {\n      this._nativeModule.stopObserving();\n    }\n\n    return this._nativeEmitter.removeAllListeners(this._nativeEventName);\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    if (Platform.OS === 'android') {\n      if (this.getListenerCount() === 1) {\n        this._nativeModule.stopObserving();\n      }\n    }\n\n    return this._nativeEmitter.removeSubscription(subscription);\n  }\n\n  setUpdateInterval(intervalMs: number): void {\n    this._nativeModule.setUpdateInterval(intervalMs);\n  }\n}\n"]}]