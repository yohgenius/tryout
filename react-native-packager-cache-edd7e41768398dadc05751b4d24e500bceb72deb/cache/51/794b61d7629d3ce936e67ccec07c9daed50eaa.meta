["64a9a40fc932930cc42cbf82b64c484bf559cf52","63a419cb43b985084fc69393a19609e8a1f3434c",["React","prop-types","ReactNative","UIManager","ViewPropTypes","dismissKeyboard","requireNativeComponent"],[57,91,132,172,214,263,320],{"version":3,"sources":["/TryOut/node_modules/react-native/Libraries/Components/ViewPager/ViewPagerAndroid.android.js"],"names":["React","require","PropTypes","ReactNative","UIManager","ViewPropTypes","dismissKeyboard","requireNativeComponent","VIEWPAGER_REF","ViewPagerAndroid","getInnerViewNode","refs","_childrenWithOverridenStyle","Children","map","props","children","child","newProps","style","position","left","top","right","bottom","width","undefined","height","collapsable","type","displayName","console","warn","createElement","_onPageScroll","e","onPageScroll","keyboardDismissMode","_onPageScrollStateChanged","onPageScrollStateChanged","nativeEvent","pageScrollState","_onPageSelected","onPageSelected","setPage","selectedPage","dispatchViewManagerCommand","findNodeHandle","AndroidViewPager","Commands","setPageWithoutAnimation","initialPage","Component","propTypes","number","func","pageMargin","oneOf","scrollEnabled","bool","peekEnabled","NativeAndroidViewPager","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ViewPagerAndroid\n * @flow\n */\n'use strict';\n\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar ReactNative = require('ReactNative');\nvar UIManager = require('UIManager');\nvar ViewPropTypes = require('ViewPropTypes');\n\nvar dismissKeyboard = require('dismissKeyboard');\nvar requireNativeComponent = require('requireNativeComponent');\n\nvar VIEWPAGER_REF = 'viewPager';\n\ntype Event = Object;\n\nexport type ViewPagerScrollState = $Enum<{\n  idle: string,\n  dragging: string,\n  settling: string,\n}>;\n\n/**\n * Container that allows to flip left and right between child views. Each\n * child view of the `ViewPagerAndroid` will be treated as a separate page\n * and will be stretched to fill the `ViewPagerAndroid`.\n *\n * It is important all children are `<View>`s and not composite components.\n * You can set style properties like `padding` or `backgroundColor` for each\n * child.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   return (\n *     <ViewPagerAndroid\n *       style={styles.viewPager}\n *       initialPage={0}>\n *       <View style={styles.pageStyle}>\n *         <Text>First page</Text>\n *       </View>\n *       <View style={styles.pageStyle}>\n *         <Text>Second page</Text>\n *       </View>\n *     </ViewPagerAndroid>\n *   );\n * }\n *\n * ...\n *\n * var styles = {\n *   ...\n *   pageStyle: {\n *     alignItems: 'center',\n *     padding: 20,\n *   }\n * }\n * ```\n */\nclass ViewPagerAndroid extends React.Component {\n  props: {\n    initialPage?: number,\n    onPageScroll?: Function,\n    onPageScrollStateChanged?: Function,\n    onPageSelected?: Function,\n    pageMargin?: number,\n    peekEnabled?: boolean,\n    keyboardDismissMode?: 'none' | 'on-drag',\n    scrollEnabled?: boolean,\n  };\n\n  static propTypes = {\n    ...ViewPropTypes,\n    /**\n     * Index of initial page that should be selected. Use `setPage` method to\n     * update the page, and `onPageSelected` to monitor page changes\n     */\n    initialPage: PropTypes.number,\n\n    /**\n     * Executed when transitioning between pages (ether because of animation for\n     * the requested page change or when user is swiping/dragging between pages)\n     * The `event.nativeEvent` object for this callback will carry following data:\n     *  - position - index of first page from the left that is currently visible\n     *  - offset - value from range [0,1) describing stage between page transitions.\n     *    Value x means that (1 - x) fraction of the page at \"position\" index is\n     *    visible, and x fraction of the next page is visible.\n     */\n    onPageScroll: PropTypes.func,\n\n    /**\n     * Function called when the page scrolling state has changed.\n     * The page scrolling state can be in 3 states:\n     * - idle, meaning there is no interaction with the page scroller happening at the time\n     * - dragging, meaning there is currently an interaction with the page scroller\n     * - settling, meaning that there was an interaction with the page scroller, and the\n     *   page scroller is now finishing it's closing or opening animation\n     */\n    onPageScrollStateChanged: PropTypes.func,\n\n    /**\n     * This callback will be called once ViewPager finish navigating to selected page\n     * (when user swipes between pages). The `event.nativeEvent` object passed to this\n     * callback will have following fields:\n     *  - position - index of page that has been selected\n     */\n    onPageSelected: PropTypes.func,\n\n    /**\n     * Blank space to show between pages. This is only visible while scrolling, pages are still\n     * edge-to-edge.\n     */\n    pageMargin: PropTypes.number,\n\n    /**\n     * Determines whether the keyboard gets dismissed in response to a drag.\n     *   - 'none' (the default), drags do not dismiss the keyboard.\n     *   - 'on-drag', the keyboard is dismissed when a drag begins.\n     */\n    keyboardDismissMode: PropTypes.oneOf([\n      'none', // default\n      'on-drag',\n    ]),\n\n    /**\n    * When false, the content does not scroll.\n    * The default value is true.\n    */\n    scrollEnabled: PropTypes.bool,\n\n    /**\n     * Whether enable showing peekFraction or not. If this is true, the preview of\n     * last and next page will show in current screen. Defaults to false.\n     */\n     peekEnabled: PropTypes.bool,\n  };\n\n  componentDidMount() {\n    if (this.props.initialPage != null) {\n      this.setPageWithoutAnimation(this.props.initialPage);\n    }\n  }\n\n  getInnerViewNode = (): ReactComponent => {\n    return this.refs[VIEWPAGER_REF].getInnerViewNode();\n  };\n\n  _childrenWithOverridenStyle = (): Array => {\n    // Override styles so that each page will fill the parent. Native component\n    // will handle positioning of elements, so it's not important to offset\n    // them correctly.\n    return React.Children.map(this.props.children, function(child) {\n      if (!child) {\n        return null;\n      }\n      var newProps = {\n        ...child.props,\n        style: [child.props.style, {\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          width: undefined,\n          height: undefined,\n        }],\n        collapsable: false,\n      };\n      if (child.type &&\n          child.type.displayName &&\n          (child.type.displayName !== 'RCTView') &&\n          (child.type.displayName !== 'View')) {\n        console.warn('Each ViewPager child must be a <View>. Was ' + child.type.displayName);\n      }\n      return React.createElement(child.type, newProps);\n    });\n  };\n\n  _onPageScroll = (e: Event) => {\n    if (this.props.onPageScroll) {\n      this.props.onPageScroll(e);\n    }\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      dismissKeyboard();\n    }\n  };\n\n  _onPageScrollStateChanged = (e: Event) => {\n    if (this.props.onPageScrollStateChanged) {\n      this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);\n    }\n  };\n\n  _onPageSelected = (e: Event) => {\n    if (this.props.onPageSelected) {\n      this.props.onPageSelected(e);\n    }\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the ViewPager.\n   * The transition between pages will be animated.\n   */\n  setPage = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      UIManager.AndroidViewPager.Commands.setPage,\n      [selectedPage],\n    );\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the ViewPager.\n   * The transition between pages will *not* be animated.\n   */\n  setPageWithoutAnimation = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      UIManager.AndroidViewPager.Commands.setPageWithoutAnimation,\n      [selectedPage],\n    );\n  };\n\n  render() {\n    return (\n      <NativeAndroidViewPager\n        {...this.props}\n        ref={VIEWPAGER_REF}\n        style={this.props.style}\n        onPageScroll={this._onPageScroll}\n        onPageScrollStateChanged={this._onPageScrollStateChanged}\n        onPageSelected={this._onPageSelected}\n        children={this._childrenWithOverridenStyle()}\n      />\n    );\n  }\n}\n\nvar NativeAndroidViewPager = requireNativeComponent('AndroidViewPager', ViewPagerAndroid);\n\nmodule.exports = ViewPagerAndroid;\n"]}]