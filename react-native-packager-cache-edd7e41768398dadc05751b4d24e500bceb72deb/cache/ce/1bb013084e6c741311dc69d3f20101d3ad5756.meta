["c3115d71f3a7b4e261904d4feb31f117f82d8c01","4727b5d1633101beb5e5e44fb9c8d0bcd858440e",["react","prop-types","./react-native","./icon-button","./tab-bar-item-ios","./toolbar-android"],[120,215,325,371,488,617],{"version":3,"sources":["/TryOut/node_modules/@expo/vector-icons/vendor/react-native-vector-icons/lib/create-icon-set.js"],"names":["createIconSet","NativeIconAPI","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","glyphMap","fontFamily","fontFile","fontReference","OS","replace","IconNamePropType","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","fontStyle","children","propTypes","isRequired","number","string","node","any","defaultProps","allowFontScaling","imageSourceCache","getImageSource","Error","processedColor","cacheKey","scale","get","Promise","resolve","reject","cached","uri","getImageForFont","err","image","error","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nconst NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nconst DEFAULT_ICON_SIZE = 12;\nconst DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(glyphMap, fontFamily, fontFile) {\n  let fontReference = fontFamily;\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  if (Platform.OS === 'android' && fontFile) {\n    fontReference = fontFile.replace(/\\.(otf|ttf)$/, '');\n  }\n\n  if (Platform.OS === 'windows' && fontFile) {\n    fontReference = `Assets/${fontFile}#${fontFamily}`;\n  }\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends Component {\n    static propTypes = {\n      name: IconNamePropType.isRequired,\n      size: PropTypes.number,\n      color: PropTypes.string,\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    root = null;\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, ...props } = this.props;\n\n      let glyph = glyphMap[name] || '?';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides];\n      props.ref = this.handleRef;\n\n      return <Text {...props}>{glyph}{this.props.children}</Text>;\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    if (!NativeIconAPI) {\n      if (Platform.OS === 'android') {\n        throw new Error(\n          'RNVectorIconsModule not available, did you properly integrate the module?'\n        );\n      }\n      throw new Error(\n        'RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a?'\n      );\n    }\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n\n  return Icon;\n}\n"]}]