["1996b138b3ab0e3588e42d7aa46c7f60d3bf4290","111fc83faa4c2896d4c65cb248671deaca8f49ba",["NativeModules","RCTDeviceEventEmitter"],[50,123],{"version":3,"sources":["/TryOut/node_modules/react-native/Libraries/Utilities/BackHandler.android.js"],"names":["DeviceEventManager","require","RCTDeviceEventEmitter","DEVICE_BACK_EVENT","_backPressSubscriptions","Set","addListener","backPressSubscriptions","invokeDefault","subscriptions","reverse","i","length","BackHandler","exitApp","invokeDefaultBackPressHandler","addEventListener","eventName","handler","add","remove","removeEventListener","delete","module","exports"],"mappings":";;AAWA;;AAEA,IAAIA,qBAAqBC,yBAAyBD,kBAAlD;AACA,IAAIE,wBAAwBD,OAAxB,yBAAJ;;AAEA,IAAIE,oBAAoB,mBAAxB;;AAMA,IAAIC,0BAA0B,IAAIC,GAAJ,EAA9B;;AAEAH,sBAAsBI,WAAtB,CAAkCH,iBAAlC,EAAqD,YAAW;AAC9D,MAAII,yBAAyB,IAAIF,GAAJ,CAAQD,uBAAR,CAA7B;AACA,MAAII,gBAAgB,IAApB;AACA,MAAIC,gBAAgB,yCAAIF,sBAAJ,GAA4BG,OAA5B,EAApB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,cAAcG,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,QAAIF,cAAcE,CAAd,GAAJ,EAAwB;AACtBH,sBAAgB,KAAhB;AACA;AACD;AACF;;AAED,MAAIA,aAAJ,EAAmB;AACjBK,gBAAYC,OAAZ;AACD;AACF,CAdD;;AA8CA,IAAID,cAAc;;AAEhBC,WAAS,mBAAW;AAClBd,uBAAmBe,6BAAnB;AACD,GAJe;;AAMhBC,oBAAkB,0BAChBC,SADgB,EAEhBC,OAFgB,EAGM;AACtBd,4BAAwBe,GAAxB,CAA4BD,OAA5B;AACA,WAAO;AACLE,cAAQ;AAAA,eAAMP,YAAYQ,mBAAZ,CAAgCJ,SAAhC,EAA2CC,OAA3C,CAAN;AAAA;AADH,KAAP;AAGD,GAde;;AAgBhBG,uBAAqB,6BACnBJ,SADmB,EAEnBC,OAFmB,EAGb;AACNd,4BAAwBkB,MAAxB,CAA+BJ,OAA/B;AACD;;AArBe,CAAlB;;AAyBAK,OAAOC,OAAP,GAAiBX,WAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BackHandler\n */\n\n'use strict';\n\nvar DeviceEventManager = require('NativeModules').DeviceEventManager;\nvar RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\n\nvar DEVICE_BACK_EVENT = 'hardwareBackPress';\n\ntype BackPressEventName = $Enum<{\n  backPress: string,\n}>;\n\nvar _backPressSubscriptions = new Set();\n\nRCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function() {\n  var backPressSubscriptions = new Set(_backPressSubscriptions);\n  var invokeDefault = true;\n  var subscriptions = [...backPressSubscriptions].reverse();\n  for (var i = 0; i < subscriptions.length; ++i) {\n    if (subscriptions[i]()) {\n      invokeDefault = false;\n      break;\n    }\n  }\n\n  if (invokeDefault) {\n    BackHandler.exitApp();\n  }\n});\n\n/**\n * Detect hardware button presses for back navigation.\n *\n * Android: Detect hardware back button presses, and programmatically invoke the default back button\n * functionality to exit the app if there are no listeners or if none of the listeners return true.\n *\n * tvOS: Detect presses of the menu button on the TV remote.  (Still to be implemented:\n * programmatically disable menu button handling\n * functionality to exit the app if there are no listeners or if none of the listeners return true.)\n *\n * iOS: Not applicable.\n *\n * The event subscriptions are called in reverse order (i.e. last registered subscription first),\n * and if one subscription returns true then subscriptions registered earlier will not be called.\n *\n * Example:\n *\n * ```javascript\n * BackHandler.addEventListener('hardwareBackPress', function() {\n *  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here\n *  // Typically you would use the navigator here to go to the last state.\n *\n *  if (!this.onMainScreen()) {\n *    this.goBack();\n *    return true;\n *  }\n *  return false;\n * });\n * ```\n */\nvar BackHandler = {\n\n  exitApp: function() {\n    DeviceEventManager.invokeDefaultBackPressHandler();\n  },\n\n  addEventListener: function (\n    eventName: BackPressEventName,\n    handler: Function\n  ): {remove: () => void} {\n    _backPressSubscriptions.add(handler);\n    return {\n      remove: () => BackHandler.removeEventListener(eventName, handler),\n    };\n  },\n\n  removeEventListener: function(\n    eventName: BackPressEventName,\n    handler: Function\n  ): void {\n    _backPressSubscriptions.delete(handler);\n  },\n\n};\n\nmodule.exports = BackHandler;\n"]}]