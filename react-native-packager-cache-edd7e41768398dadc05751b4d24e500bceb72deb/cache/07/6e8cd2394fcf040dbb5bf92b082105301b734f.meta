["fa68ff53be080a3c40f9ac8423b8249c9af927d4","ff5c5629a029098c989c63002316aa04e16321af",["prop-types","react","react-native","./MapMarker","./MapPolyline","./MapPolygon","./MapCircle","./MapCallout","./MapUrlTile","./AnimatedRegion","./decorateMapComponent","./ProviderConstants"],[25,129,226,269,380,496,608,718,831,948,1083,1144],{"version":3,"sources":["/TryOut/node_modules/react-native-maps/lib/components/MapView.js"],"names":["ProviderConstants","MAP_TYPES","STANDARD","SATELLITE","HYBRID","TERRAIN","NONE","GOOGLE_MAPS_ONLY_TYPES","viewConfig","uiViewClassName","validAttributes","region","propTypes","provider","oneOf","style","customMapStyle","array","customMapStyleString","string","showsUserLocation","bool","userLocationAnnotationTitle","showsMyLocationButton","followsUserLocation","showsPointsOfInterest","showsCompass","zoomEnabled","rotateEnabled","cacheEnabled","loadingEnabled","loadingBackgroundColor","loadingIndicatorColor","scrollEnabled","pitchEnabled","toolbarEnabled","moveOnMarkerPress","showsScale","showsBuildings","showsTraffic","showsIndoors","showsIndoorLevelPicker","mapType","Object","values","shape","latitude","number","isRequired","longitude","latitudeDelta","longitudeDelta","initialRegion","liteMode","maxDelta","minDelta","legalLabelInsets","onRegionChange","func","onRegionChangeComplete","onPress","onLongPress","onPanDrag","onMarkerPress","onMarkerSelect","onMarkerDeselect","onCalloutPress","onMarkerDragStart","onMarkerDrag","onMarkerDragEnd","MapView","props","state","isReady","OS","_onMapReady","bind","_onChange","_onLayout","nextProps","a","__lastRegion","b","map","setNativeProps","_updateStyle","JSON","stringify","setState","e","layout","nativeEvent","width","height","__layoutCalled","onLayout","event","continuous","duration","_runCommand","latLng","animated","markers","coordinates","options","edgePadding","top","right","bottom","left","args","arguments","length","console","warn","callback","undefined","config","format","quality","result","Error","AirMapModule","takeSnapshot","_getHandle","Promise","resolve","reject","err","snapshot","name","UIManager","Commands","dispatchViewManagerCommand","_uiManagerCommand","_mapManagerCommand","onChange","onMapReady","PROVIDER_DEFAULT","includes","standard","handlePanDrag","ref","AIRMap","getAirMapComponent","Component","childContextTypes","nativeComponent","nativeOnly","airMaps","default","google","AIRMapLite","Marker","Polyline","Polygon","Circle","UrlTile","Callout","ProviderPropType","Animated","createAnimatedComponent","AnimatedRegion","module","exports"],"mappings":"AAAA;;;;AACA;;;;AACA;;AAUA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAMA;;IAAYA,iB;;;AAEZ,IAAMC,YAAY;AAChBC,YAAU,UADM;AAEhBC,aAAW,WAFK;AAGhBC,UAAQ,QAHQ;AAIhBC,WAAS,SAJO;AAKhBC,QAAM;AALU,CAAlB;;AAQA,IAAMC,yBAAyB,CAC7BN,UAAUI,OADmB,EAE7BJ,UAAUK,IAFmB,CAA/B;;AAKA,IAAME,aAAa;AACjBC,mBAAiB,kBADA;AAEjBC,mBAAiB;AACfC,YAAQ;AADO;AAFA,CAAnB;;AAOA,IAAMC;AAOJC,YAAU,oBAAUC,KAAV,CAAgB,CACxB,QADwB,CAAhB,CAPN;;AAeJC,SAAO,2BAAcA,KAfjB;;AAuBJC,kBAAgB,oBAAUC,KAvBtB;;AA8BJC,wBAAsB,oBAAUC,MA9B5B;;AAwCJC,qBAAmB,oBAAUC,IAxCzB;;AAiDJC,+BAA6B,oBAAUH,MAjDnC;;AAyDJI,yBAAuB,oBAAUF,IAzD7B;;AAkEJG,uBAAqB,oBAAUH,IAlE3B;;AAyEJI,yBAAuB,oBAAUJ,IAzE7B;;AAiFJK,gBAAc,oBAAUL,IAjFpB;;AAwFJM,eAAa,oBAAUN,IAxFnB;;AA+FJO,iBAAe,oBAAUP,IA/FrB;;AAsGJQ,gBAAc,oBAAUR,IAtGpB;;AA6GJS,kBAAgB,oBAAUT,IA7GtB;;AAoHJU,oDApHI;;AA2HJC,mDA3HI;;AAkIJC,iBAAe,oBAAUZ,IAlIrB;;AAyIJa,gBAAc,oBAAUb,IAzIpB;;AAiJJc,kBAAgB,oBAAUd,IAjJtB;;AAyJJe,qBAAmB,oBAAUf,IAzJzB;;AAgKJgB,cAAY,oBAAUhB,IAhKlB;;AAsKJiB,kBAAgB,oBAAUjB,IAtKtB;;AA4KJkB,gBAAc,oBAAUlB,IA5KpB;;AAoLJmB,gBAAc,oBAAUnB,IApLpB;;AA4LJoB,0BAAwB,oBAAUpB,IA5L9B;;AAuMJqB,WAAS,oBAAU5B,KAAV,CAAgB6B,OAAOC,MAAP,CAAc3C,SAAd,CAAhB,CAvML;;AA+MJU,UAAQ,oBAAUkC,KAAV,CAAgB;AAItBC,cAAU,oBAAUC,MAAV,CAAiBC,UAJL;AAKtBC,eAAW,oBAAUF,MAAV,CAAiBC,UALN;;AAWtBE,mBAAe,oBAAUH,MAAV,CAAiBC,UAXV;AAYtBG,oBAAgB,oBAAUJ,MAAV,CAAiBC;AAZX,GAAhB,CA/MJ;;AAsOJI,iBAAe,oBAAUP,KAAV,CAAgB;AAI7BC,cAAU,oBAAUC,MAAV,CAAiBC,UAJE;AAK7BC,eAAW,oBAAUF,MAAV,CAAiBC,UALC;;AAW7BE,mBAAe,oBAAUH,MAAV,CAAiBC,UAXH;AAY7BG,oBAAgB,oBAAUJ,MAAV,CAAiBC;AAZJ,GAAhB,CAtOX;;AA2PJK,YAAU,oBAAUhC,IA3PhB;;AAkQJiC,YAAU,oBAAUP,MAlQhB;;AAyQJQ,YAAU,oBAAUR,MAzQhB;;AA+QJS,mDA/QI;;AAoRJC,kBAAgB,oBAAUC,IApRtB;;AAyRJC,0BAAwB,oBAAUD,IAzR9B;;AA8RJE,WAAS,oBAAUF,IA9Rf;;AAmSJG,eAAa,oBAAUH,IAnSnB;;AAwSJI,aAAW,oBAAUJ,IAxSjB;;AA6SJK,iBAAe,oBAAUL,IA7SrB;;AAqTJM,kBAAgB,oBAAUN,IArTtB;;AA6TJO,oBAAkB,oBAAUP,IA7TxB;;AAkUJQ,kBAAgB,oBAAUR,IAlUtB;;AAuUJS,qBAAmB,oBAAUT,IAvUzB;;AA4UJU,gBAAc,oBAAUV,IA5UpB;;AAkVJW,mBAAiB,oBAAUX;;AAlVvB,EAAN;;IAsVMY,O;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8HACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,eAAS,sBAASC,EAAT,KAAgB;AADd,KAAb;;AAIA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,OAAjB;AACA,UAAKE,SAAL,GAAiB,MAAKA,SAAL,CAAeF,IAAf,OAAjB;AATiB;AAUlB;;;;sCAEiB;AAChB,aAAO,EAAE/D,UAAU,KAAK0D,KAAL,CAAW1D,QAAvB,EAAP;AACD;;;wCAEmBkE,S,EAAW;AAC7B,UAAMC,IAAI,KAAKC,YAAf;AACA,UAAMC,IAAIH,UAAUpE,MAApB;AACA,UAAI,CAACqE,CAAD,IAAM,CAACE,CAAX,EAAc;AACd,UACEF,EAAElC,QAAF,KAAeoC,EAAEpC,QAAjB,IACAkC,EAAE/B,SAAF,KAAgBiC,EAAEjC,SADlB,IAEA+B,EAAE9B,aAAF,KAAoBgC,EAAEhC,aAFtB,IAGA8B,EAAE7B,cAAF,KAAqB+B,EAAE/B,cAJzB,EAKE;AACA,aAAKgC,GAAL,CAASC,cAAT,CAAwB,EAAEzE,QAAQuE,CAAV,EAAxB;AACD;AACF;;;wCAEmB;AAAA,UACVT,OADU,GACE,KAAKD,KADP,CACVC,OADU;;AAElB,UAAIA,OAAJ,EAAa;AACX,aAAKY,YAAL;AACD;AACF;;;mCAEc;AAAA,UACLrE,cADK,GACc,KAAKuD,KADnB,CACLvD,cADK;;AAEb,WAAKmE,GAAL,CAASC,cAAT,CAAwB,EAAElE,sBAAsBoE,KAAKC,SAAL,CAAevE,cAAf,CAAxB,EAAxB;AACD;;;kCAEa;AAAA,mBACsB,KAAKuD,KAD3B;AAAA,UACJ5D,MADI,UACJA,MADI;AAAA,UACIyC,aADJ,UACIA,aADJ;;AAEZ,UAAIzC,MAAJ,EAAY;AACV,aAAKwE,GAAL,CAASC,cAAT,CAAwB,EAAEzE,cAAF,EAAxB;AACD,OAFD,MAEO,IAAIyC,aAAJ,EAAmB;AACxB,aAAK+B,GAAL,CAASC,cAAT,CAAwB,EAAEzE,QAAQyC,aAAV,EAAxB;AACD;AACD,WAAKiC,YAAL;AACA,WAAKG,QAAL,CAAc,EAAEf,SAAS,IAAX,EAAd;AACD;;;8BAESgB,C,EAAG;AAAA,UACHC,MADG,GACQD,EAAEE,WADV,CACHD,MADG;;AAEX,UAAI,CAACA,OAAOE,KAAR,IAAiB,CAACF,OAAOG,MAA7B,EAAqC;AACrC,UAAI,KAAKrB,KAAL,CAAWC,OAAX,IAAsB,CAAC,KAAKqB,cAAhC,EAAgD;AAC9C,YAAMnF,SAAS,KAAK4D,KAAL,CAAW5D,MAAX,IAAqB,KAAK4D,KAAL,CAAWnB,aAA/C;AACA,YAAIzC,MAAJ,EAAY;AACV,eAAKmF,cAAL,GAAsB,IAAtB;AACA,eAAKX,GAAL,CAASC,cAAT,CAAwB,EAAEzE,cAAF,EAAxB;AACD;AACF;AACD,UAAI,KAAK4D,KAAL,CAAWwB,QAAf,EAAyB;AACvB,aAAKxB,KAAL,CAAWwB,QAAX,CAAoBN,CAApB;AACD;AACF;;;8BAESO,K,EAAO;AACf,WAAKf,YAAL,GAAoBe,MAAML,WAAN,CAAkBhF,MAAtC;AACA,UAAIqF,MAAML,WAAN,CAAkBM,UAAtB,EAAkC;AAChC,YAAI,KAAK1B,KAAL,CAAWd,cAAf,EAA+B;AAC7B,eAAKc,KAAL,CAAWd,cAAX,CAA0BuC,MAAML,WAAN,CAAkBhF,MAA5C;AACD;AACF,OAJD,MAIO,IAAI,KAAK4D,KAAL,CAAWZ,sBAAf,EAAuC;AAC5C,aAAKY,KAAL,CAAWZ,sBAAX,CAAkCqC,MAAML,WAAN,CAAkBhF,MAApD;AACD;AACF;;;oCAEeA,M,EAAQuF,Q,EAAU;AAChC,WAAKC,WAAL,CAAiB,iBAAjB,EAAoC,CAACxF,MAAD,EAASuF,YAAY,GAArB,CAApC;AACD;;;wCAEmBE,M,EAAQF,Q,EAAU;AACpC,WAAKC,WAAL,CAAiB,qBAAjB,EAAwC,CAACC,MAAD,EAASF,YAAY,GAArB,CAAxC;AACD;;;kCAEaG,Q,EAAU;AACtB,WAAKF,WAAL,CAAiB,eAAjB,EAAkC,CAACE,QAAD,CAAlC;AACD;;;yCAEoBC,O,EAASD,Q,EAAU;AACtC,WAAKF,WAAL,CAAiB,sBAAjB,EAAyC,CAACG,OAAD,EAAUD,QAAV,CAAzC;AACD;;;uCAE2C;AAAA,UAA3BE,WAA2B,uEAAb,EAAa;AAAA,UAATC,OAAS;AAAA,iCAItCA,OAJsC,CAExCC,WAFwC;AAAA,UAExCA,WAFwC,wCAE1B,EAAEC,KAAK,CAAP,EAAUC,OAAO,CAAjB,EAAoBC,QAAQ,CAA5B,EAA+BC,MAAM,CAArC,EAF0B;AAAA,8BAItCL,OAJsC,CAGxCH,QAHwC;AAAA,UAGxCA,QAHwC,qCAG7B,IAH6B;;;AAM1C,WAAKF,WAAL,CAAiB,kBAAjB,EAAqC,CAACI,WAAD,EAAcE,WAAd,EAA2BJ,QAA3B,CAArC;AACD;;;iCAgBYS,I,EAAM;AAAA;;AAIjB,UAAI,sBAASpC,EAAT,KAAgB,KAAhB,IAA0BqC,UAAUC,MAAV,KAAqB,CAAnD,EAAuD;AACrDC,gBAAQC,IAAR,CAAa,8EAAb;AACA,YAAMtB,QAAQmB,UAAU,CAAV,CAAd;AACA,YAAMlB,SAASkB,UAAU,CAAV,CAAf;AACA,YAAMpG,SAASoG,UAAU,CAAV,CAAf;AACA,YAAMI,WAAWJ,UAAU,CAAV,CAAjB;AACA,aAAKZ,WAAL,CAAiB,cAAjB,EAAiC,CAC/BP,SAAS,CADsB,EAE/BC,UAAU,CAFqB,EAG/BlF,UAAU,EAHqB,EAI/B,KAJ+B,EAK/B,CAL+B,EAM/B,QAN+B,EAO/BwG,QAP+B,CAAjC;AASA,eAAOC,SAAP;AACD;;AAGD,UAAMC,SAAS;AACbzB,eAAOkB,KAAKlB,KAAL,IAAc,CADR;AAEbC,gBAAQiB,KAAKjB,MAAL,IAAe,CAFV;AAGblF,gBAAQmG,KAAKnG,MAAL,IAAe,EAHV;AAIb2G,gBAAQR,KAAKQ,MAAL,IAAe,KAJV;AAKbC,iBAAST,KAAKS,OAAL,IAAgB,GALZ;AAMbC,gBAAQV,KAAKU,MAAL,IAAe;AANV,OAAf;AAQA,UAAKH,OAAOC,MAAP,KAAkB,KAAnB,IACCD,OAAOC,MAAP,KAAkB,KADvB,EAC+B,MAAM,IAAIG,KAAJ,CAAU,0BAAV,CAAN;AAC/B,UAAKJ,OAAOG,MAAP,KAAkB,MAAnB,IACCH,OAAOG,MAAP,KAAkB,QADvB,EACkC,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;;AAGlC,UAAI,sBAAS/C,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,2BAAcgD,YAAd,CAA2BC,YAA3B,CAAwC,KAAKC,UAAL,EAAxC,EAA2DP,MAA3D,CAAP;AACD,OAFD,MAEO,IAAI,sBAAS3C,EAAT,KAAgB,KAApB,EAA2B;AAChC,eAAO,IAAImD,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,iBAAK5B,WAAL,CAAiB,cAAjB,EAAiC,CAC/BkB,OAAOzB,KADwB,EAE/ByB,OAAOxB,MAFwB,EAG/BwB,OAAO1G,MAHwB,EAI/B0G,OAAOC,MAJwB,EAK/BD,OAAOE,OALwB,EAM/BF,OAAOG,MANwB,EAO/B,UAACQ,GAAD,EAAMC,QAAN,EAAmB;AACjB,gBAAID,GAAJ,EAAS;AACPD,qBAAOC,GAAP;AACD,aAFD,MAEO;AACLF,sBAAQG,QAAR;AACD;AACF,WAb8B,CAAjC;AAeD,SAhBM,CAAP;AAiBD;AACD,aAAOJ,QAAQE,MAAR,CAAe,6CAAf,CAAP;AACD;;;sCAEiBG,I,EAAM;AACtB,aAAO,2BAAcC,SAAd,CAAwB,yCAAc,KAAK5D,KAAL,CAAW1D,QAAzB,CAAxB,EAA4DuH,QAA5D,CAAqEF,IAArE,CAAP;AACD;;;uCAEkBA,I,EAAM;AACvB,aAAO,2BAAiB,yCAAc,KAAK3D,KAAL,CAAW1D,QAAzB,CAAjB,cAA8DqH,IAA9D,CAAP;AACD;;;iCAEY;AACX,aAAO,iCAAe,KAAK/C,GAApB,CAAP;AACD;;;gCAEW+C,I,EAAMpB,I,EAAM;AACtB,cAAQ,sBAASpC,EAAjB;AACE,aAAK,SAAL;AACE,qCAAcyD,SAAd,CAAwBE,0BAAxB,CACE,KAAKT,UAAL,EADF,EAEE,KAAKU,iBAAL,CAAuBJ,IAAvB,CAFF,EAGEpB,IAHF;AAKA;;AAEF,aAAK,KAAL;AACE,eAAKyB,kBAAL,CAAwBL,IAAxB,oBAA8B,KAAKN,UAAL,EAA9B,wCAAoDd,IAApD;AACA;;AAEF;AACE;AAdJ;AAgBD;;;6BAEQ;AAAA;;AACP,UAAIvC,cAAJ;;AAEA,UAAI,KAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtBF,yCACK,KAAKA,KADV;AAEE5D,kBAAQ,IAFV;AAGEyC,yBAAe,IAHjB;AAIEoF,oBAAU,KAAK3D,SAJjB;AAKE4D,sBAAY,KAAK9D,WALnB;AAMEoB,oBAAU,KAAKjB;AANjB;AAQA,YAAI,sBAASJ,EAAT,KAAgB,KAAhB,IAAyBH,MAAM1D,QAAN,KAAmBb,kBAAkB0I,gBAA9D,IACCnI,uBAAuBoI,QAAvB,CAAgCpE,MAAM7B,OAAtC,CADL,EACqD;AACnD6B,gBAAM7B,OAAN,GAAgBzC,UAAU2I,QAA1B;AACD;AACDrE,cAAMsE,aAAN,GAAsB,CAAC,CAACtE,MAAMT,SAA9B;AACD,OAdD,MAcO;AACLS,gBAAQ;AACNxD,iBAAO,KAAKwD,KAAL,CAAWxD,KADZ;AAENJ,kBAAQ,IAFF;AAGNyC,yBAAe,IAHT;AAINoF,oBAAU,KAAK3D,SAJT;AAKN4D,sBAAY,KAAK9D,WALX;AAMNoB,oBAAU,KAAKjB;AANT,SAAR;AAQD;;AAED,UAAI,sBAASJ,EAAT,KAAgB,SAAhB,IAA6B,KAAKH,KAAL,CAAWlB,QAA5C,EAAsD;AACpD,eACE,8BAAC,UAAD;AACE,eAAK,mBAAO;AAAE,mBAAK8B,GAAL,GAAW2D,IAAX;AAAiB;AADjC,WAEMvE,KAFN,EADF;AAMD;;AAED,UAAMwE,SAASC,mBAAmB,KAAKzE,KAAL,CAAW1D,QAA9B,CAAf;;AAEA,aACE,8BAAC,MAAD;AACE,aAAK,oBAAO;AAAE,iBAAKsE,GAAL,GAAW2D,KAAX;AAAiB;AADjC,SAEMvE,KAFN,EADF;AAMD;;;EAhQmB,gBAAM0E,S;;AAmQ5B3E,QAAQ1D,SAAR,GAAoBA,SAApB;AACA0D,QAAQ9D,UAAR,GAAqBA,UAArB;AACA8D,QAAQ4E,iBAAR;;AAEA5E,QAAQrE,SAAR,GAAoBA,SAApB;;AAEA,IAAMkJ,kBAAkB,SAAlBA,eAAkB;AAAA,SAAa,yCAAuBF,SAAvB,EAAkC3E,OAAlC,EAA2C;AAC9E8E,gBAAY;AACVZ,gBAAU,IADA;AAEVC,kBAAY,IAFF;AAGVI,qBAAe;AAHL;AADkE,GAA3C,CAAb;AAAA,CAAxB;AAOA,IAAMQ,UAAU;AACdC,WAASH,gBAAgB,QAAhB;AADK,CAAhB;AAGA,IAAI,sBAASzE,EAAT,KAAgB,SAApB,EAA+B;AAC7B2E,UAAQE,MAAR,GAAiBF,QAAQC,OAAzB;AACD,CAFD,MAEO;AACLD,UAAQE,MAAR,GAAiB,6CAAuBJ,gBAAgB,cAAhB,CAAvB,GACf,uDAA4B,wGAA5B,CADF;AAED;AACD,IAAMH,qBAAqB,SAArBA,kBAAqB;AAAA,SAAYK,QAAQxI,YAAY,SAApB,CAAZ;AAAA,CAA3B;;AAEA,IAAM2I,aAAa,2BAAcrB,SAAd,CAAwBqB,UAAxB,IACjB,yCAAuB,YAAvB,EAAqClF,OAArC,EAA8C;AAC5C8E,cAAY;AACVZ,cAAU,IADA;AAEVC,gBAAY,IAFF;AAGVI,mBAAe;AAHL;AADgC,CAA9C,CADF;;AASAvE,QAAQmF,MAAR;AACAnF,QAAQoF,QAAR;AACApF,QAAQqF,OAAR;AACArF,QAAQsF,MAAR;AACAtF,QAAQuF,OAAR;AACAvF,QAAQwF,OAAR;AACA,qBAAcxF,OAAd,EAAuBtE,iBAAvB;AACAsE,QAAQyF,gBAAR,GAA2B,oBAAUjJ,KAAV,CAAgB6B,OAAOC,MAAP,CAAc5C,iBAAd,CAAhB,CAA3B;;AAEAsE,QAAQ0F,QAAR,GAAmB,sBAASC,uBAAT,CAAiC3F,OAAjC,CAAnB;AACAA,QAAQ4F,cAAR;;AAEAC,OAAOC,OAAP,GAAiB9F,OAAjB","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  EdgeInsetsPropType,\n  Platform,\n  Animated,\n  requireNativeComponent,\n  NativeModules,\n  ColorPropType,\n  findNodeHandle,\n  ViewPropTypes,\n} from 'react-native';\nimport MapMarker from './MapMarker';\nimport MapPolyline from './MapPolyline';\nimport MapPolygon from './MapPolygon';\nimport MapCircle from './MapCircle';\nimport MapCallout from './MapCallout';\nimport MapUrlTile from './MapUrlTile';\nimport AnimatedRegion from './AnimatedRegion';\nimport {\n  contextTypes as childContextTypes,\n  getAirMapName,\n  googleMapIsInstalled,\n  createNotSupportedComponent,\n} from './decorateMapComponent';\nimport * as ProviderConstants from './ProviderConstants';\n\nconst MAP_TYPES = {\n  STANDARD: 'standard',\n  SATELLITE: 'satellite',\n  HYBRID: 'hybrid',\n  TERRAIN: 'terrain',\n  NONE: 'none',\n};\n\nconst GOOGLE_MAPS_ONLY_TYPES = [\n  MAP_TYPES.TERRAIN,\n  MAP_TYPES.NONE,\n];\n\nconst viewConfig = {\n  uiViewClassName: 'AIR<provider>Map',\n  validAttributes: {\n    region: true,\n  },\n};\n\nconst propTypes = {\n  ...ViewPropTypes,\n  /**\n   * When provider is \"google\", we will use GoogleMaps.\n   * Any value other than \"google\" will default to using\n   * MapKit in iOS or GoogleMaps in android as the map provider.\n   */\n  provider: PropTypes.oneOf([\n    'google',\n  ]),\n\n  /**\n   * Used to style and layout the `MapView`.  See `StyleSheet.js` and\n   * `ViewStylePropTypes.js` for more info.\n   */\n  style: ViewPropTypes.style,\n\n  /**\n   * A json object that describes the style of the map. This is transformed to a string\n   * and saved in mayStyleString to be sent to android and ios\n   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource\n   * https://developers.google.com/maps/documentation/android-api/styling\n   */\n  customMapStyle: PropTypes.array,\n\n  /**\n   * A json string that describes the style of the map\n   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource\n   * https://developers.google.com/maps/documentation/android-api/styling\n   */\n  customMapStyleString: PropTypes.string,\n\n  /**\n   * If `true` the app will ask for the user's location.\n   * Default value is `false`.\n   *\n   * **NOTE**: You need to add NSLocationWhenInUseUsageDescription key in\n   * Info.plist to enable geolocation, otherwise it is going\n   * to *fail silently*!\n   */\n  showsUserLocation: PropTypes.bool,\n\n  /**\n   * The title of the annotation for current user location. This only works if\n   * `showsUserLocation` is true.\n   * There is a default value `My Location` set by MapView.\n   *\n   * @platform ios\n   */\n  userLocationAnnotationTitle: PropTypes.string,\n\n  /**\n   * If `false` hide the button to move map to the current user's location.\n   * Default value is `true`.\n   *\n   * @platform android\n   */\n  showsMyLocationButton: PropTypes.bool,\n\n  /**\n   * If `true` the map will focus on the user's location. This only works if\n   * `showsUserLocation` is true and the user has shared their location.\n   * Default value is `false`.\n   *\n   * @platform ios\n   */\n  followsUserLocation: PropTypes.bool,\n\n  /**\n   * If `false` points of interest won't be displayed on the map.\n   * Default value is `true`.\n   *\n   */\n  showsPointsOfInterest: PropTypes.bool,\n\n  /**\n   * If `false` compass won't be displayed on the map.\n   * Default value is `true`.\n   *\n   * @platform ios\n   */\n  showsCompass: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to pinch/zoom the map.\n   * Default value is `true`.\n   *\n   */\n  zoomEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to pinch/rotate the map.\n   * Default value is `true`.\n   *\n   */\n  rotateEnabled: PropTypes.bool,\n\n  /**\n   * If `true` the map will be cached to an Image for performance\n   * Default value is `false`.\n   *\n   */\n  cacheEnabled: PropTypes.bool,\n\n  /**\n   * If `true` the map will be showing a loading indicator\n   * Default value is `false`.\n   *\n   */\n  loadingEnabled: PropTypes.bool,\n\n  /**\n   * Loading background color while generating map cache image or loading the map\n   * Default color is light gray.\n   *\n   */\n  loadingBackgroundColor: ColorPropType,\n\n  /**\n   * Loading indicator color while generating map cache image or loading the map\n   * Default color is gray color for iOS, theme color for Android.\n   *\n   */\n  loadingIndicatorColor: ColorPropType,\n\n  /**\n   * If `false` the user won't be able to change the map region being displayed.\n   * Default value is `true`.\n   *\n   */\n  scrollEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to adjust the camera’s pitch angle.\n   * Default value is `true`.\n   *\n   */\n  pitchEnabled: PropTypes.bool,\n\n  /**\n   * If `false` will hide 'Navigate' and 'Open in Maps' buttons on marker press\n   * Default value is `true`.\n   *\n   * @platform android\n   */\n  toolbarEnabled: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether on marker press the map will move to the pressed marker\n   * Default value is `true`\n   *\n   * @platform android\n   */\n  moveOnMarkerPress: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether the map shows scale information.\n   * Default value is `false`\n   *\n   */\n  showsScale: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether the map displays extruded building information.\n   * Default value is `true`.\n   */\n  showsBuildings: PropTypes.bool,\n\n  /**\n   * A Boolean value indicating whether the map displays traffic information.\n   * Default value is `false`.\n   */\n  showsTraffic: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether indoor maps should be enabled.\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  showsIndoors: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether indoor level picker should be enabled.\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  showsIndoorLevelPicker: PropTypes.bool,\n\n  /**\n   * The map type to be displayed.\n   *\n   * - standard: standard road map (default)\n   * - satellite: satellite view\n   * - hybrid: satellite view with roads and points of interest overlayed\n   * - terrain: topographic view\n   * - none: no base map\n   */\n  mapType: PropTypes.oneOf(Object.values(MAP_TYPES)),\n\n  /**\n   * The region to be displayed by the map.\n   *\n   * The region is defined by the center coordinates and the span of\n   * coordinates to display.\n   */\n  region: PropTypes.shape({\n    /**\n     * Coordinates for the center of the map.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n\n    /**\n     * Difference between the minimun and the maximum latitude/longitude\n     * to be displayed.\n     */\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * The initial region to be displayed by the map.  Use this prop instead of `region`\n   * only if you don't want to control the viewport of the map besides the initial region.\n   *\n   * Changing this prop after the component has mounted will not result in a region change.\n   *\n   * This is similar to the `initialValue` prop of a text input.\n   */\n  initialRegion: PropTypes.shape({\n    /**\n     * Coordinates for the center of the map.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n\n    /**\n     * Difference between the minimun and the maximum latitude/longitude\n     * to be displayed.\n     */\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * A Boolean indicating whether to use liteMode for android\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  liteMode: PropTypes.bool,\n\n  /**\n   * Maximum size of area that can be displayed.\n   *\n   * @platform ios\n   */\n  maxDelta: PropTypes.number,\n\n  /**\n   * Minimum size of area that can be displayed.\n   *\n   * @platform ios\n   */\n  minDelta: PropTypes.number,\n\n  /**\n   * Insets for the map's legal label, originally at bottom left of the map.\n   * See `EdgeInsetsPropType.js` for more information.\n   */\n  legalLabelInsets: EdgeInsetsPropType,\n\n  /**\n   * Callback that is called continuously when the user is dragging the map.\n   */\n  onRegionChange: PropTypes.func,\n\n  /**\n   * Callback that is called once, when the user is done moving the map.\n   */\n  onRegionChangeComplete: PropTypes.func,\n\n  /**\n   * Callback that is called when user taps on the map.\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Callback that is called when user makes a \"long press\" somewhere on the map.\n   */\n  onLongPress: PropTypes.func,\n\n  /**\n   * Callback that is called when user makes a \"drag\" somewhere on the map\n   */\n  onPanDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map is tapped by the user.\n   */\n  onMarkerPress: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map becomes selected. This will be called when\n   * the callout for that marker is about to be shown.\n   *\n   * @platform ios\n   */\n  onMarkerSelect: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map becomes deselected. This will be called when\n   * the callout for that marker is about to be hidden.\n   *\n   * @platform ios\n   */\n  onMarkerDeselect: PropTypes.func,\n\n  /**\n   * Callback that is called when a callout is tapped by the user.\n   */\n  onCalloutPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the user initiates a drag on a marker (if it is draggable)\n   */\n  onMarkerDragStart: PropTypes.func,\n\n  /**\n   * Callback called continuously as a marker is dragged\n   */\n  onMarkerDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when a drag on a marker finishes. This is usually the point you\n   * will want to setState on the marker's coordinate again\n   */\n  onMarkerDragEnd: PropTypes.func,\n\n};\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isReady: Platform.OS === 'ios',\n    };\n\n    this._onMapReady = this._onMapReady.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onLayout = this._onLayout.bind(this);\n  }\n\n  getChildContext() {\n    return { provider: this.props.provider };\n  }\n\n  componentWillUpdate(nextProps) {\n    const a = this.__lastRegion;\n    const b = nextProps.region;\n    if (!a || !b) return;\n    if (\n      a.latitude !== b.latitude ||\n      a.longitude !== b.longitude ||\n      a.latitudeDelta !== b.latitudeDelta ||\n      a.longitudeDelta !== b.longitudeDelta\n    ) {\n      this.map.setNativeProps({ region: b });\n    }\n  }\n\n  componentDidMount() {\n    const { isReady } = this.state;\n    if (isReady) {\n      this._updateStyle();\n    }\n  }\n\n  _updateStyle() {\n    const { customMapStyle } = this.props;\n    this.map.setNativeProps({ customMapStyleString: JSON.stringify(customMapStyle) });\n  }\n\n  _onMapReady() {\n    const { region, initialRegion } = this.props;\n    if (region) {\n      this.map.setNativeProps({ region });\n    } else if (initialRegion) {\n      this.map.setNativeProps({ region: initialRegion });\n    }\n    this._updateStyle();\n    this.setState({ isReady: true });\n  }\n\n  _onLayout(e) {\n    const { layout } = e.nativeEvent;\n    if (!layout.width || !layout.height) return;\n    if (this.state.isReady && !this.__layoutCalled) {\n      const region = this.props.region || this.props.initialRegion;\n      if (region) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({ region });\n      }\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  }\n\n  _onChange(event) {\n    this.__lastRegion = event.nativeEvent.region;\n    if (event.nativeEvent.continuous) {\n      if (this.props.onRegionChange) {\n        this.props.onRegionChange(event.nativeEvent.region);\n      }\n    } else if (this.props.onRegionChangeComplete) {\n      this.props.onRegionChangeComplete(event.nativeEvent.region);\n    }\n  }\n\n  animateToRegion(region, duration) {\n    this._runCommand('animateToRegion', [region, duration || 500]);\n  }\n\n  animateToCoordinate(latLng, duration) {\n    this._runCommand('animateToCoordinate', [latLng, duration || 500]);\n  }\n\n  fitToElements(animated) {\n    this._runCommand('fitToElements', [animated]);\n  }\n\n  fitToSuppliedMarkers(markers, animated) {\n    this._runCommand('fitToSuppliedMarkers', [markers, animated]);\n  }\n\n  fitToCoordinates(coordinates = [], options) {\n    const {\n      edgePadding = { top: 0, right: 0, bottom: 0, left: 0 },\n      animated = true,\n    } = options;\n\n    this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);\n  }\n\n  /**\n   * Takes a snapshot of the map and saves it to a picture\n   * file or returns the image as a base64 encoded string.\n   *\n   * @param config Configuration options\n   * @param [config.width] Width of the rendered map-view (when omitted actual view width is used).\n   * @param [config.height] Height of the rendered map-view (when omitted actual height is used).\n   * @param [config.region] Region to render (Only supported on iOS).\n   * @param [config.format] Encoding format ('png', 'jpg') (default: 'png').\n   * @param [config.quality] Compression quality (only used for jpg) (default: 1.0).\n   * @param [config.result] Result format ('file', 'base64') (default: 'file').\n   *\n   * @return Promise Promise with either the file-uri or base64 encoded string\n   */\n  takeSnapshot(args) {\n    // For the time being we support the legacy API on iOS.\n    // This will be removed in a future release and only the\n    // new Promise style API shall be supported.\n    if (Platform.OS === 'ios' && (arguments.length === 4)) {\n      console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future'); //eslint-disable-line\n      const width = arguments[0]; // eslint-disable-line\n      const height = arguments[1]; // eslint-disable-line\n      const region = arguments[2]; // eslint-disable-line\n      const callback = arguments[3]; // eslint-disable-line\n      this._runCommand('takeSnapshot', [\n        width || 0,\n        height || 0,\n        region || {},\n        'png',\n        1,\n        'legacy',\n        callback,\n      ]);\n      return undefined;\n    }\n\n    // Sanitize inputs\n    const config = {\n      width: args.width || 0,\n      height: args.height || 0,\n      region: args.region || {},\n      format: args.format || 'png',\n      quality: args.quality || 1.0,\n      result: args.result || 'file',\n    };\n    if ((config.format !== 'png') &&\n        (config.format !== 'jpg')) throw new Error('Invalid format specified');\n    if ((config.result !== 'file') &&\n        (config.result !== 'base64')) throw new Error('Invalid result specified');\n\n    // Call native function\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);\n    } else if (Platform.OS === 'ios') {\n      return new Promise((resolve, reject) => {\n        this._runCommand('takeSnapshot', [\n          config.width,\n          config.height,\n          config.region,\n          config.format,\n          config.quality,\n          config.result,\n          (err, snapshot) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(snapshot);\n            }\n          },\n        ]);\n      });\n    }\n    return Promise.reject('takeSnapshot not supported on this platform');\n  }\n\n  _uiManagerCommand(name) {\n    return NativeModules.UIManager[getAirMapName(this.props.provider)].Commands[name];\n  }\n\n  _mapManagerCommand(name) {\n    return NativeModules[`${getAirMapName(this.props.provider)}Manager`][name];\n  }\n\n  _getHandle() {\n    return findNodeHandle(this.map);\n  }\n\n  _runCommand(name, args) {\n    switch (Platform.OS) {\n      case 'android':\n        NativeModules.UIManager.dispatchViewManagerCommand(\n          this._getHandle(),\n          this._uiManagerCommand(name),\n          args\n        );\n        break;\n\n      case 'ios':\n        this._mapManagerCommand(name)(this._getHandle(), ...args);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  render() {\n    let props;\n\n    if (this.state.isReady) {\n      props = {\n        ...this.props,\n        region: null,\n        initialRegion: null,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout,\n      };\n      if (Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT\n        && GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {\n        props.mapType = MAP_TYPES.standard;\n      }\n      props.handlePanDrag = !!props.onPanDrag;\n    } else {\n      props = {\n        style: this.props.style,\n        region: null,\n        initialRegion: null,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout,\n      };\n    }\n\n    if (Platform.OS === 'android' && this.props.liteMode) {\n      return (\n        <AIRMapLite\n          ref={ref => { this.map = ref; }}\n          {...props}\n        />\n      );\n    }\n\n    const AIRMap = getAirMapComponent(this.props.provider);\n\n    return (\n      <AIRMap\n        ref={ref => { this.map = ref; }}\n        {...props}\n      />\n    );\n  }\n}\n\nMapView.propTypes = propTypes;\nMapView.viewConfig = viewConfig;\nMapView.childContextTypes = childContextTypes;\n\nMapView.MAP_TYPES = MAP_TYPES;\n\nconst nativeComponent = Component => requireNativeComponent(Component, MapView, {\n  nativeOnly: {\n    onChange: true,\n    onMapReady: true,\n    handlePanDrag: true,\n  },\n});\nconst airMaps = {\n  default: nativeComponent('AIRMap'),\n};\nif (Platform.OS === 'android') {\n  airMaps.google = airMaps.default;\n} else {\n  airMaps.google = googleMapIsInstalled ? nativeComponent('AIRGoogleMap') :\n    createNotSupportedComponent('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.'); // eslint-disable-line max-len\n}\nconst getAirMapComponent = provider => airMaps[provider || 'default'];\n\nconst AIRMapLite = NativeModules.UIManager.AIRMapLite &&\n  requireNativeComponent('AIRMapLite', MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      handlePanDrag: true,\n    },\n  });\n\nMapView.Marker = MapMarker;\nMapView.Polyline = MapPolyline;\nMapView.Polygon = MapPolygon;\nMapView.Circle = MapCircle;\nMapView.UrlTile = MapUrlTile;\nMapView.Callout = MapCallout;\nObject.assign(MapView, ProviderConstants);\nMapView.ProviderPropType = PropTypes.oneOf(Object.values(ProviderConstants));\n\nMapView.Animated = Animated.createAnimatedComponent(MapView);\nMapView.AnimatedRegion = AnimatedRegion;\n\nmodule.exports = MapView;\n"]}]