["553c12ce1de6ab3881746e2e6f5fe05a44bd97cc","c0a95d8e69f68c161e66c41c65b65ad0879bd53d",["react-native","regenerator-runtime"],[258,309],{"version":3,"sources":["/TryOut/node_modules/expo/src/SecureStore.js"],"names":["deleteValueWithKeyAsync","getValueWithKeyAsync","setValueWithKeyAsync","ExponentSecureStore","_keyIsValid","tstString","match","_valueIsValid","key","options","Promise","resolve","reject","Error","fetchedValue","value"],"mappings":";;;QAmBgBA,uB,GAAAA,uB;QAoBAC,oB,GAAAA,oB;QAyBAC,oB,GAAAA,oB;;AA9DhB;;;;IAEQC,mB,8BAAAA,mB;;;AAOR,SAASC,WAAT,CAAqBC,SAArB,EAAgC;AAC9B,SAAOA,UAAUC,KAAV,CAAgB,WAAhB,CAAP;AACD;;AAED,SAASC,aAAT,CAAuBF,SAAvB,EAAkC;AAChC,SAAOA,UAAUC,KAAV,CAAgB,OAAhB,CAAP;AACD;;AAEM,SAASN,uBAAT,CACLQ,GADK,EAELC,OAFK,EAGL;AAAA;;AACA,MAAI,CAACA,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AAC3CA,cAAU,EAAV;AACD;AACD,SAAO,IAAIC,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAEVR,YAAYI,GAAZ,CAFU;AAAA;AAAA;AAAA;;AAAA,kBAGP,IAAIK,KAAJ,CAAU,cAAV,CAHO;;AAAA;AAAA;AAAA,4CAKTV,oBAAoBH,uBAApB,CAA4CQ,GAA5C,EAAiDC,OAAjD,CALS;;AAAA;AAMfE;AANe;AAAA;;AAAA;AAAA;AAAA;;AAQfC;;AARe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AAWD;;AAEM,SAASX,oBAAT,CACLO,GADK,EAELC,OAFK,EAGL;AAAA;;AACA,MAAI,CAACA,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AAC3CA,cAAU,EAAV;AACD;AACD,SAAO,IAAIC,OAAJ,CAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAEVR,YAAYI,GAAZ,CAFU;AAAA;AAAA;AAAA;;AAAA,kBAGP,IAAIK,KAAJ,CACJ,2EADI,CAHO;;AAAA;AAAA;AAAA,4CAOYV,oBAAoBF,oBAApB,CACzBO,GADyB,EAEzBC,OAFyB,CAPZ;;AAAA;AAOTK,wBAPS;;AAWfH,oBAAQG,YAAR;AAXe;AAAA;;AAAA;AAAA;AAAA;;AAafF;;AAbe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AAgBD;;AAEM,SAASV,oBAAT,CACLa,KADK,EAELP,GAFK,EAGLC,OAHK,EAIL;AAAA;;AACA,MAAI,CAACA,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AAC3CA,cAAU,EAAV;AACD;AACD,SAAO,IAAIC,OAAJ,CAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAEVR,YAAYI,GAAZ,CAFU;AAAA;AAAA;AAAA;;AAAA,kBAGP,IAAIK,KAAJ,CACJ,2EADI,CAHO;;AAAA;AAAA,gBAQVN,cAAcQ,KAAd,CARU;AAAA;AAAA;AAAA;;AAAA,kBASP,IAAIF,KAAJ,CAAU,gDAAV,CATO;;AAAA;AAAA;AAAA,4CAYTV,oBAAoBD,oBAApB,CAAyCa,KAAzC,EAAgDP,GAAhD,EAAqDC,OAArD,CAZS;;AAAA;AAafE;AAbe;AAAA;;AAAA;AAAA;AAAA;;AAefC;;AAfe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AAkBD","sourcesContent":["// @flow\n\nimport { NativeModules } from 'react-native';\n\nconst { ExponentSecureStore } = NativeModules;\n\ntype SecureStoreOptions = {\n  keychainService?: string,\n  keychainAccessible?: string,\n};\n\nfunction _keyIsValid(tstString) {\n  return tstString.match(/^[\\w.-]+$/);\n}\n\nfunction _valueIsValid(tstString) {\n  return tstString.match(/^\\S*$/);\n}\n\nexport function deleteValueWithKeyAsync(\n  key: string,\n  options?: SecureStoreOptions\n) {\n  if (!options || typeof options !== 'object') {\n    options = {};\n  }\n  return new Promise(async (resolve, reject) => {\n    try {\n      if (!_keyIsValid(key)) {\n        throw new Error('Invalid key.');\n      }\n      await ExponentSecureStore.deleteValueWithKeyAsync(key, options);\n      resolve();\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function getValueWithKeyAsync(\n  key: string,\n  options?: SecureStoreOptions\n) {\n  if (!options || typeof options !== 'object') {\n    options = {};\n  }\n  return new Promise(async (resolve, reject) => {\n    try {\n      if (!_keyIsValid(key)) {\n        throw new Error(\n          'Invalid key. Keys may constain alphanumeric characters, `.`, `-`, and `_`'\n        );\n      }\n      const fetchedValue = await ExponentSecureStore.getValueWithKeyAsync(\n        key,\n        options\n      );\n      resolve(fetchedValue);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function setValueWithKeyAsync(\n  value: string,\n  key: string,\n  options?: SecureStoreOptions\n) {\n  if (!options || typeof options !== 'object') {\n    options = {};\n  }\n  return new Promise(async (resolve, reject) => {\n    try {\n      if (!_keyIsValid(key)) {\n        throw new Error(\n          'Invalid key. Keys may constain alphanumeric characters, `.`, `-`, and `_`'\n        );\n      }\n\n      if (!_valueIsValid(value)) {\n        throw new Error('Invalid key. Keys may not contain white space.');\n      }\n\n      await ExponentSecureStore.setValueWithKeyAsync(value, key, options);\n      resolve();\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n"]}]