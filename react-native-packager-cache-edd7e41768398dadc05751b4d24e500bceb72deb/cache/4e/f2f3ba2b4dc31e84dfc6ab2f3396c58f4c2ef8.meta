["86e3d6054e10bc742f8496096c1c395326bd2a0e","abf1b0101c8fb4a32cce7ee4da61f9febbdd266f",["lodash/isEqual","lodash/pick","react","prop-types","./react-native"],[138,241,336,431,541],{"version":3,"sources":["/TryOut/node_modules/@expo/vector-icons/vendor/react-native-vector-icons/lib/toolbar-android.js"],"names":["createToolbarAndroidComponent","IconNamePropType","getImageSource","props","size","iconSize","color","iconColor","titleColor","logoName","then","setState","logo","navIconName","navIcon","overflowIconName","overflowIcon","Promise","all","actions","map","action","iconName","icon","resolve","updateIconSources","nextProps","keys","Object","IconToolbarAndroid","propTypes","stateToEvict","undefined","state","length","logoIconName","arrayOf","shape","title","string","isRequired","number","show","oneOf","showWithText","bool","defaultProps"],"mappings":"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","sourcesContent":["import isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends Component {\n    static propTypes = {\n      logoIconName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.string,\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.string,\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    updateIconSources(props) {\n      const size = props.iconSize;\n      const color = props.iconColor || props.titleColor;\n      if (props.logoName) {\n        getImageSource(props.logoName, size, color).then(logo =>\n          this.setState({ logo })\n        );\n      }\n      if (props.navIconName) {\n        getImageSource(props.navIconName, size, color).then(navIcon =>\n          this.setState({ navIcon })\n        );\n      }\n      if (props.overflowIconName) {\n        getImageSource(props.overflowIconName, size, color).then(overflowIcon =>\n          this.setState({ overflowIcon })\n        );\n      }\n\n      Promise.all(\n        (props.actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || size,\n              action.iconColor || color\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      ).then(actions => this.setState({ actions }));\n    }\n\n    componentWillMount() {\n      this.updateIconSources(this.props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const keys = Object.keys(IconToolbarAndroid.propTypes);\n      if (!isEqual(pick(nextProps, keys), pick(this.props, keys))) {\n        const stateToEvict = {};\n        if (!nextProps.logoName) {\n          stateToEvict.logo = undefined;\n        }\n        if (!nextProps.navIconName) {\n          stateToEvict.navIcon = undefined;\n        }\n        if (!nextProps.overflowIconName) {\n          stateToEvict.overflowIcon = undefined;\n        }\n        if (this.state && Object.keys(stateToEvict).length) {\n          this.setState(stateToEvict, () => this.updateIconSources(nextProps));\n        } else {\n          this.updateIconSources(nextProps);\n        }\n      }\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]}]