["0f3cf17ed80cee60e91dc835ac7bf42b7a17fc77","bd4576027df29c61eab292ad2d8cfbccffd4baf1",["Map","NativeEventEmitter","NativeModules","Platform"],[34,75,126,167],{"version":3,"sources":["/TryOut/node_modules/react-native/Libraries/Network/NetInfo.js"],"names":["Map","require","NativeEventEmitter","NativeModules","Platform","RCTNetInfo","NetInfo","NetInfoEventEmitter","DEVICE_CONNECTIVITY_EVENT","_subscriptions","_isConnected","OS","reachability","connectionType","_isConnectedSubscriptions","addEventListener","eventName","handler","listener","addListener","appStateData","network_info","set","remove","removeEventListener","get","delete","fetch","getCurrentConnectivity","then","resp","isConnected","connection","isConnectionExpensive","isConnectionMetered","Promise","reject","Error","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NetInfo\n * @flow\n */\n'use strict';\n\nconst Map = require('Map');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\nconst RCTNetInfo = NativeModules.NetInfo;\n\nconst NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);\n\nconst DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';\n\ntype ChangeEventName = $Enum<{\n  change: string,\n}>;\n\ntype ReachabilityStateIOS = $Enum<{\n  cell: string,\n  none: string,\n  unknown: string,\n  wifi: string,\n}>;\n\ntype ConnectivityStateAndroid = $Enum<{\n  NONE: string,\n  MOBILE: string,\n  WIFI: string,\n  MOBILE_MMS: string,\n  MOBILE_SUPL: string,\n  MOBILE_DUN: string,\n  MOBILE_HIPRI: string,\n  WIMAX: string,\n  BLUETOOTH: string,\n  DUMMY: string,\n  ETHERNET: string,\n  MOBILE_FOTA: string,\n  MOBILE_IMS: string,\n  MOBILE_CBS: string,\n  WIFI_P2P: string,\n  MOBILE_IA: string,\n  MOBILE_EMERGENCY: string,\n  PROXY: string,\n  VPN: string,\n  UNKNOWN: string,\n}>;\n\n\nconst _subscriptions = new Map();\n\nlet _isConnected;\nif (Platform.OS === 'ios') {\n  _isConnected = function(\n    reachability: ReachabilityStateIOS,\n  ): bool {\n    return reachability !== 'none' && reachability !== 'unknown';\n  };\n} else if (Platform.OS === 'android') {\n  _isConnected = function(\n      connectionType: ConnectivityStateAndroid,\n    ): bool {\n    return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';\n  };\n}\n\nconst _isConnectedSubscriptions = new Map();\n\n/**\n * NetInfo exposes info about online/offline status\n *\n * ```\n * NetInfo.fetch().then((reach) => {\n *   console.log('Initial: ' + reach);\n * });\n * function handleFirstConnectivityChange(reach) {\n *   console.log('First change: ' + reach);\n *   NetInfo.removeEventListener(\n *     'change',\n *     handleFirstConnectivityChange\n *   );\n * }\n * NetInfo.addEventListener(\n *   'change',\n *   handleFirstConnectivityChange\n * );\n * ```\n *\n * ### IOS\n *\n * Asynchronously determine if the device is online and on a cellular network.\n *\n * - `none` - device is offline\n * - `wifi` - device is online and connected via wifi, or is the iOS simulator\n * - `cell` - device is connected via Edge, 3G, WiMax, or LTE\n * - `unknown` - error case and the network status is unknown\n *\n * ### Android\n *\n * To request network info, you need to add the following line to your\n * app's `AndroidManifest.xml`:\n *\n * `<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />`\n * Asynchronously determine if the device is connected and details about that connection.\n *\n * Android Connectivity Types.\n *\n * - `NONE` - device is offline\n * - `BLUETOOTH` - The Bluetooth data connection.\n * - `DUMMY` -  Dummy data connection.\n * - `ETHERNET` - The Ethernet data connection.\n * - `MOBILE` - The Mobile data connection.\n * - `MOBILE_DUN` - A DUN-specific Mobile data connection.\n * - `MOBILE_HIPRI` - A High Priority Mobile data connection.\n * - `MOBILE_MMS` - An MMS-specific Mobile data connection.\n * - `MOBILE_SUPL` -  A SUPL-specific Mobile data connection.\n * - `VPN` -  A virtual network using one or more native bearers. Requires API Level 21\n * - `WIFI` - The WIFI data connection.\n * - `WIMAX` -  The WiMAX data connection.\n * - `UNKNOWN` - Unknown data connection.\n *\n * The rest ConnectivityStates are hidden by the Android API, but can be used if necessary.\n *\n * ### isConnectionExpensive\n *\n * Available on Android. Detect if the current active connection is metered or not. A network is\n * classified as metered when the user is sensitive to heavy data usage on that connection due to\n * monetary costs, data limitations or battery/performance issues.\n *\n * ```\n * NetInfo.isConnectionExpensive()\n * .then(isConnectionExpensive => {\n *   console.log('Connection is ' + (isConnectionExpensive ? 'Expensive' : 'Not Expensive'));\n * })\n * .catch(error => {\n *   console.error(error);\n * });\n * ```\n *\n * ### isConnected\n *\n * Available on all platforms. Asynchronously fetch a boolean to determine\n * internet connectivity.\n *\n * ```\n * NetInfo.isConnected.fetch().then(isConnected => {\n *   console.log('First, is ' + (isConnected ? 'online' : 'offline'));\n * });\n * function handleFirstConnectivityChange(isConnected) {\n *   console.log('Then, is ' + (isConnected ? 'online' : 'offline'));\n *   NetInfo.isConnected.removeEventListener(\n *     'change',\n *     handleFirstConnectivityChange\n *   );\n * }\n * NetInfo.isConnected.addEventListener(\n *   'change',\n *   handleFirstConnectivityChange\n * );\n * ```\n */\nconst NetInfo = {\n  /**\n   * Invokes the listener whenever network status changes.\n   * The listener receives one of the connectivity types listed above.\n   */\n  addEventListener(\n    eventName: ChangeEventName,\n    handler: Function\n  ): {remove: () => void} {\n    const listener = NetInfoEventEmitter.addListener(\n      DEVICE_CONNECTIVITY_EVENT,\n      (appStateData) => {\n        handler(appStateData.network_info);\n      }\n    );\n    _subscriptions.set(handler, listener);\n    return {\n      remove: () => NetInfo.removeEventListener(eventName, handler)\n    };\n  },\n\n  /**\n   * Removes the listener for network status changes.\n   */\n  removeEventListener(\n    eventName: ChangeEventName,\n    handler: Function\n  ): void {\n    const listener = _subscriptions.get(handler);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _subscriptions.delete(handler);\n  },\n\n  /**\n   * Returns a promise that resolves with one of the connectivity types listed\n   * above.\n   */\n  fetch(): Promise<any> {\n    return RCTNetInfo.getCurrentConnectivity().then(resp => resp.network_info);\n  },\n\n  /**\n   * An object with the same methods as above but the listener receives a\n   * boolean which represents the internet connectivity.\n   * Use this if you are only interested with whether the device has internet\n   * connectivity.\n   */\n  isConnected: {\n    addEventListener(\n      eventName: ChangeEventName,\n      handler: Function\n    ): {remove: () => void} {\n      const listener = (connection) => {\n        handler(_isConnected(connection));\n      };\n      _isConnectedSubscriptions.set(handler, listener);\n      NetInfo.addEventListener(\n        eventName,\n        listener\n      );\n      return {\n        remove: () => NetInfo.isConnected.removeEventListener(eventName, handler)\n      };\n    },\n\n    removeEventListener(\n      eventName: ChangeEventName,\n      handler: Function\n    ): void {\n      const listener = _isConnectedSubscriptions.get(handler);\n      NetInfo.removeEventListener(\n        eventName,\n        /* $FlowFixMe(>=0.36.0 site=react_native_fb,react_native_oss) Flow error\n         * detected during the deploy of Flow v0.36.0. To see the error, remove\n         * this comment and run Flow */\n        listener\n      );\n      _isConnectedSubscriptions.delete(handler);\n    },\n\n    fetch(): Promise<any> {\n      return NetInfo.fetch().then(\n        (connection) => _isConnected(connection)\n      );\n    },\n  },\n\n  isConnectionExpensive(): Promise<boolean> {\n    return (\n      Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'))\n    );\n  },\n};\n\nmodule.exports = NetInfo;\n"]}]