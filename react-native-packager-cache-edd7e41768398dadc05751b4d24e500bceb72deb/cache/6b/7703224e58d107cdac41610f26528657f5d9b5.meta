["edab5adc36293e8fe29cd988292139a086df8073","0592b2c1b458338b3d8bfc1e9d98a1bd1a10a1a5",["Batchinator","FillRateHelper","prop-types","React","ReactNative","RefreshControl","ScrollView","StyleSheet","View","ViewabilityHelper","flattenStyle","infoLog","fbjs/lib/invariant","fbjs/lib/warning","VirtualizeUtils"],[80,125,168,203,239,284,328,368,402,443,493,532,568,613,658],{"version":3,"sources":["/TryOut/node_modules/react-native/Libraries/Lists/VirtualizedList.js"],"names":["Batchinator","require","FillRateHelper","PropTypes","React","ReactNative","RefreshControl","ScrollView","StyleSheet","View","ViewabilityHelper","flattenStyle","infoLog","invariant","warning","computeWindowedRenderLimits","_usedIndexForKey","VirtualizedList","params","animated","veryLast","props","getItemCount","data","frame","_getFrameMetricsApprox","offset","Math","max","length","_footerLength","_scrollMetrics","visibleLength","_scrollRef","scrollTo","horizontal","x","y","getItemLayout","index","viewOffset","viewPosition","_highestMeasuredFrameIndex","item","getItem","itemCount","scrollToIndex","_viewabilityHelper","recordInteraction","_updateViewableItems","flashScrollIndicators","getScrollResponder","getScrollableNode","findNodeHandle","setNativeProps","virtualizedList","context","onScroll","__isNative","_isNestedWithSameOrientation","onViewableItemsChanged","_fillRateHelper","_getFrameMetrics","_updateCellsToRenderBatcher","_updateCellsToRender","updateCellsBatchingPeriod","viewabilityConfig","state","first","initialScrollIndex","last","min","initialNumToRender","_initialScrollIndexTimeout","setTimeout","dispose","deactivateAndFlush","clearTimeout","newProps","extraData","maxToRenderPerBatch","setState","_hasDataChangedSinceEndReached","cells","stickyHeaderIndices","stickyIndicesFromProps","inversionStyle","ItemSeparatorComponent","keyExtractor","stickyOffset","ListHeaderComponent","end","prevCellKey","ii","key","has","push","undefined","_onUpdateSeparators","_onCellLayout","e","_onCellUnmount","_cellRefs","ref","disableVirtualization","nestedContext","__DEV__","flatStyles","contentContainerStyle","flexWrap","ListEmptyComponent","ListFooterComponent","isVirtualizationDisabled","_isVirtualizationDisabled","inverted","styles","horizontallyInverted","verticallyInverted","Set","element","isValidElement","_onLayoutHeader","spacerKey","lastInitialIndex","_pushCells","firstAfterInitial","insertedStickySpacer","size","initBlock","stickyBlock","leadSpace","trailSpace","firstSpace","_hasWarned","keys","console","warn","lastFrame","endFrame","tailSpacerLength","_onLayoutEmpty","_onLayoutFooter","scrollProps","onContentSizeChange","_onContentSizeChange","onLayout","_onLayout","_onScroll","onScrollBeginDrag","_onScrollBeginDrag","onScrollEndDrag","_onScrollEndDrag","onMomentumScrollEnd","_onMomentumScrollEnd","scrollEventThrottle","style","ret","cloneElement","renderScrollComponent","_defaultRenderScrollComponent","_captureScrollRef","debug","flex","_renderDebugOverlay","_scheduleCellsToRenderUpdate","computeBlankness","cellKey","layout","nativeEvent","next","_selectOffset","_selectLength","inLayout","curr","_frames","_totalCellLength","_totalCellsMeasured","_averageCellLength","_computeBlankness","normalize","contentLength","framesInLayout","windowTop","frameLast","windowLen","visTop","visLen","baseStyle","position","top","right","bottom","width","borderColor","borderWidth","map","f","left","height","backgroundColor","metrics","onEndReached","onEndReachedThreshold","distanceFromEnd","_sentEndForContentLength","velocity","hiPri","distTop","distBottom","scrollingThreshold","abort","schedule","onUpdate","_createViewToken","PureComponent","defaultProps","String","windowSize","contextTypes","shape","bool","childContextTypes","forEach","updateSeparatorProps","_headerLength","dOffset","dt","timestamp","onRefresh","refreshing","JSON","stringify","progressViewOffset","_maybeCallOnEndReached","timeStamp","layoutMeasurement","contentSize","contentOffset","perf","prevDt","activate","newState","renderAhead","isViewable","frameType","number","isRequired","checkPropTypes","CellRenderer","separatorProps","highlighted","leadingItem","_separators","highlight","onUpdateSeparators","unhighlight","updateProps","select","onUnmount","fillRateHelper","parentProps","renderItem","separators","enabled","Component","create","transform","scaleY","scaleX","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule VirtualizedList\n * @flow\n * @format\n */\n'use strict';\n\nconst Batchinator = require('Batchinator');\nconst FillRateHelper = require('FillRateHelper');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst RefreshControl = require('RefreshControl');\nconst ScrollView = require('ScrollView');\nconst StyleSheet = require('StyleSheet');\nconst View = require('View');\nconst ViewabilityHelper = require('ViewabilityHelper');\n\nconst flattenStyle = require('flattenStyle');\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\nconst warning = require('fbjs/lib/warning');\n\nconst {computeWindowedRenderLimits} = require('VirtualizeUtils');\n\nimport type {StyleObj} from 'StyleSheetTypes';\nimport type {ViewabilityConfig, ViewToken} from 'ViewabilityHelper';\n\ntype Item = any;\n\ntype renderItemType = (info: any) => ?React.Element<any>;\n\ntype RequiredProps = {\n  renderItem: renderItemType,\n  /**\n   * The default accessor functions assume this is an Array<{key: string}> but you can override\n   * getItem, getItemCount, and keyExtractor to handle any type of index-based data.\n   */\n  data?: any,\n  /**\n   * A generic accessor for extracting an item from any sort of data blob.\n   */\n  getItem: (data: any, index: number) => ?Item,\n  /**\n   * Determines how many items are in the data blob.\n   */\n  getItemCount: (data: any) => number,\n};\ntype OptionalProps = {\n  /**\n   * `debug` will turn on extra logging and visual overlays to aid with debugging both usage and\n   * implementation, but with a significant perf hit.\n   */\n  debug?: ?boolean,\n  /**\n   * DEPRECATED: Virtualization provides significant performance and memory optimizations, but fully\n   * unmounts react instances that are outside of the render window. You should only need to disable\n   * this for debugging purposes.\n   */\n  disableVirtualization: boolean,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  getItemLayout?: (\n    data: any,\n    index: number,\n  ) => {length: number, offset: number, index: number}, // e.g. height, y\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  keyExtractor: (item: Item, index: number) => string,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * The maximum number of items to render in each incremental render batch. The more rendered at\n   * once, the better the fill rate, but responsiveness my suffer because rendering content may\n   * interfere with responding to button taps or other interactions.\n   */\n  maxToRenderPerBatch: number,\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  onEndReachedThreshold?: ?number, // units of visible length\n  onLayout?: ?Function,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?Function,\n  /**\n   * Called when the viewability of rows changes, as defined by the\n   * `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this when offset is needed for the loading indicator to show correctly.\n   * @platform android\n   */\n  progressViewOffset?: number,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * Render a custom scroll component, e.g. with a differently styled `RefreshControl`.\n   */\n  renderScrollComponent?: (props: Object) => React.Element<any>,\n  /**\n   * Amount of time between low-pri item render batches, e.g. for rendering items quite a ways off\n   * screen. Similar fill rate/responsiveness tradeoff as `maxToRenderPerBatch`.\n   */\n  updateCellsBatchingPeriod: number,\n  viewabilityConfig?: ViewabilityConfig,\n  /**\n   * Determines the maximum number of items rendered outside of the visible area, in units of\n   * visible lengths. So if your list fills the screen, then `windowSize={21}` (the default) will\n   * render the visible screen area plus up to 10 screens above and 10 below the viewport. Reducing\n   * this number will reduce memory consumption and may improve performance, but will increase the\n   * chance that fast scrolling may reveal momentary blank areas of unrendered content.\n   */\n  windowSize: number,\n};\n/* $FlowFixMe - this Props seems to be missing a bunch of stuff. Remove this\n * comment to see the errors */\nexport type Props = RequiredProps & OptionalProps;\n\nlet _usedIndexForKey = false;\n\ntype State = {first: number, last: number};\n\n/**\n * Base implementation for the more convenient [`<FlatList>`](/react-native/docs/flatlist.html)\n * and [`<SectionList>`](/react-native/docs/sectionlist.html) components, which are also better\n * documented. In general, this should only really be used if you need more flexibility than\n * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.\n *\n * Virtualization massively improves memory consumption and performance of large lists by\n * maintaining a finite render window of active items and replacing all items outside of the render\n * window with appropriately sized blank space. The window adapts to scrolling behavior, and items\n * are rendered incrementally with low-pri (after any running interactions) if they are far from the\n * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.\n *\n * Some caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n */\nclass VirtualizedList extends React.PureComponent<OptionalProps, Props, State> {\n  props: Props;\n\n  // scrollToEnd may be janky without getItemLayout prop\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    const animated = params ? params.animated : true;\n    const veryLast = this.props.getItemCount(this.props.data) - 1;\n    const frame = this._getFrameMetricsApprox(veryLast);\n    const offset = Math.max(\n      0,\n      frame.offset +\n        frame.length +\n        this._footerLength -\n        this._scrollMetrics.visibleLength,\n    );\n    this._scrollRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n\n  // scrollToIndex may be janky without getItemLayout prop\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    const {data, horizontal, getItemCount, getItemLayout} = this.props;\n    const {animated, index, viewOffset, viewPosition} = params;\n    invariant(\n      index >= 0 && index < getItemCount(data),\n      `scrollToIndex out of range: ${index} vs ${getItemCount(data) - 1}`,\n    );\n    invariant(\n      getItemLayout || index < this._highestMeasuredFrameIndex,\n      'scrollToIndex should be used in conjunction with getItemLayout, ' +\n        'otherwise there is no way to know the location of an arbitrary index.',\n    );\n    const frame = this._getFrameMetricsApprox(index);\n    const offset =\n      Math.max(\n        0,\n        frame.offset -\n          (viewPosition || 0) *\n            (this._scrollMetrics.visibleLength - frame.length),\n      ) - (viewOffset || 0);\n    this._scrollRef.scrollTo(\n      horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n\n  // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -\n  // use scrollToIndex instead if possible.\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: Item,\n    viewPosition?: number,\n  }) {\n    const {item} = params;\n    const {data, getItem, getItemCount} = this.props;\n    const itemCount = getItemCount(data);\n    for (let index = 0; index < itemCount; index++) {\n      if (getItem(data, index) === item) {\n        this.scrollToIndex({...params, index});\n        break;\n      }\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Param `offset` expects the offset to scroll to.\n   * In case of `horizontal` is true, the offset is the x-value,\n   * in any other case the offset is the y-value.\n   *\n   * Param `animated` (`true` by default) defines whether the list\n   * should do an animation while scrolling.\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    const {animated, offset} = params;\n    this._scrollRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n\n  recordInteraction() {\n    this._viewabilityHelper.recordInteraction();\n    this._updateViewableItems(this.props.data);\n  }\n\n  flashScrollIndicators() {\n    this._scrollRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollRef` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder() {\n    if (this._scrollRef && this._scrollRef.getScrollResponder) {\n      return this._scrollRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode() {\n    if (this._scrollRef && this._scrollRef.getScrollableNode) {\n      return this._scrollRef.getScrollableNode();\n    } else {\n      return ReactNative.findNodeHandle(this._scrollRef);\n    }\n  }\n\n  setNativeProps(props: Object) {\n    if (this._scrollRef) {\n      this._scrollRef.setNativeProps(props);\n    }\n  }\n\n  static defaultProps = {\n    disableVirtualization: false,\n    horizontal: false,\n    initialNumToRender: 10,\n    keyExtractor: (item: Item, index: number) => {\n      if (item.key != null) {\n        return item.key;\n      }\n      _usedIndexForKey = true;\n      return String(index);\n    },\n    maxToRenderPerBatch: 10,\n    onEndReachedThreshold: 2, // multiples of length\n    scrollEventThrottle: 50,\n    updateCellsBatchingPeriod: 50,\n    windowSize: 21, // multiples of length\n  };\n\n  static contextTypes = {\n    virtualizedList: PropTypes.shape({\n      horizontal: PropTypes.bool,\n    }),\n  };\n\n  static childContextTypes = {\n    virtualizedList: PropTypes.shape({\n      horizontal: PropTypes.bool,\n    }),\n  };\n\n  getChildContext() {\n    return {\n      virtualizedList: {\n        horizontal: this.props.horizontal,\n        // TODO: support nested virtualization and onViewableItemsChanged\n      },\n    };\n  }\n\n  state: State;\n\n  constructor(props: Props, context: Object) {\n    super(props, context);\n    invariant(\n      !props.onScroll || !props.onScroll.__isNative,\n      'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' +\n        'to support native onScroll events with useNativeDriver',\n    );\n    invariant(\n      !(this._isNestedWithSameOrientation() && props.onViewableItemsChanged),\n      'Nesting lists that scroll in the same direction does not support onViewableItemsChanged' +\n        'on the inner list.',\n    );\n\n    this._fillRateHelper = new FillRateHelper(this._getFrameMetrics);\n    this._updateCellsToRenderBatcher = new Batchinator(\n      this._updateCellsToRender,\n      this.props.updateCellsBatchingPeriod,\n    );\n    this._viewabilityHelper = new ViewabilityHelper(\n      this.props.viewabilityConfig,\n    );\n    this.state = {\n      first: this.props.initialScrollIndex || 0,\n      last:\n        Math.min(\n          this.props.getItemCount(this.props.data),\n          (this.props.initialScrollIndex || 0) + this.props.initialNumToRender,\n        ) - 1,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.initialScrollIndex) {\n      this._initialScrollIndexTimeout = setTimeout(\n        () =>\n          this.scrollToIndex({\n            animated: false,\n            index: this.props.initialScrollIndex,\n          }),\n        0,\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this._updateViewableItems(null);\n    this._updateCellsToRenderBatcher.dispose();\n    this._viewabilityHelper.dispose();\n    this._fillRateHelper.deactivateAndFlush();\n    clearTimeout(this._initialScrollIndexTimeout);\n  }\n\n  componentWillReceiveProps(newProps: Props) {\n    const {data, extraData, getItemCount, maxToRenderPerBatch} = newProps;\n    // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make\n    // sure we're rendering a reasonable range here.\n    this.setState({\n      first: Math.max(\n        0,\n        Math.min(\n          this.state.first,\n          getItemCount(data) - 1 - maxToRenderPerBatch,\n        ),\n      ),\n      last: Math.max(0, Math.min(this.state.last, getItemCount(data) - 1)),\n    });\n    if (data !== this.props.data || extraData !== this.props.extraData) {\n      this._hasDataChangedSinceEndReached = true;\n    }\n  }\n\n  _pushCells(\n    cells: Array<Object>,\n    stickyHeaderIndices: Array<number>,\n    stickyIndicesFromProps: Set<number>,\n    first: number,\n    last: number,\n    inversionStyle: ?StyleObj,\n  ) {\n    const {\n      ItemSeparatorComponent,\n      data,\n      getItem,\n      getItemCount,\n      keyExtractor,\n    } = this.props;\n    const stickyOffset = this.props.ListHeaderComponent ? 1 : 0;\n    const end = getItemCount(data) - 1;\n    let prevCellKey;\n    last = Math.min(end, last);\n    for (let ii = first; ii <= last; ii++) {\n      const item = getItem(data, ii);\n      invariant(item, 'No item for index ' + ii);\n      const key = keyExtractor(item, ii);\n      if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n        stickyHeaderIndices.push(cells.length);\n      }\n      cells.push(\n        <CellRenderer\n          ItemSeparatorComponent={ii < end ? ItemSeparatorComponent : undefined}\n          cellKey={key}\n          fillRateHelper={this._fillRateHelper}\n          index={ii}\n          inversionStyle={inversionStyle}\n          item={item}\n          key={key}\n          prevCellKey={prevCellKey}\n          onUpdateSeparators={this._onUpdateSeparators}\n          onLayout={e => this._onCellLayout(e, key, ii)}\n          onUnmount={this._onCellUnmount}\n          parentProps={this.props}\n          ref={ref => {\n            this._cellRefs[key] = ref;\n          }}\n        />,\n      );\n      prevCellKey = key;\n    }\n  }\n\n  _onUpdateSeparators = (keys: Array<?string>, newProps: Object) => {\n    keys.forEach(key => {\n      const ref = key != null && this._cellRefs[key];\n      ref && ref.updateSeparatorProps(newProps);\n    });\n  };\n\n  _isVirtualizationDisabled(): boolean {\n    return (\n      this.props.disableVirtualization || this._isNestedWithSameOrientation()\n    );\n  }\n\n  _isNestedWithSameOrientation(): boolean {\n    const nestedContext = this.context.virtualizedList;\n    return !!(\n      nestedContext && !!nestedContext.horizontal === !!this.props.horizontal\n    );\n  }\n\n  render() {\n    if (__DEV__) {\n      const flatStyles = flattenStyle(this.props.contentContainerStyle);\n      warning(\n        flatStyles == null || flatStyles.flexWrap !== 'wrap',\n        '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' +\n          'Consider using `numColumns` with `FlatList` instead.',\n      );\n    }\n\n    const {\n      ListEmptyComponent,\n      ListFooterComponent,\n      ListHeaderComponent,\n    } = this.props;\n    const {data, horizontal} = this.props;\n    const isVirtualizationDisabled = this._isVirtualizationDisabled();\n    const inversionStyle = this.props.inverted\n      ? this.props.horizontal\n        ? styles.horizontallyInverted\n        : styles.verticallyInverted\n      : null;\n    const cells = [];\n    const stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);\n    const stickyHeaderIndices = [];\n    if (ListHeaderComponent) {\n      const element = React.isValidElement(ListHeaderComponent)\n        ? ListHeaderComponent // $FlowFixMe\n        : <ListHeaderComponent />;\n      cells.push(\n        <View\n          key=\"$header\"\n          onLayout={this._onLayoutHeader}\n          style={inversionStyle}>\n          {element}\n        </View>,\n      );\n    }\n    const itemCount = this.props.getItemCount(data);\n    if (itemCount > 0) {\n      _usedIndexForKey = false;\n      const spacerKey = !horizontal ? 'height' : 'width';\n      const lastInitialIndex = this.props.initialScrollIndex\n        ? -1\n        : this.props.initialNumToRender - 1;\n      const {first, last} = this.state;\n      this._pushCells(\n        cells,\n        stickyHeaderIndices,\n        stickyIndicesFromProps,\n        0,\n        lastInitialIndex,\n        inversionStyle,\n      );\n      const firstAfterInitial = Math.max(lastInitialIndex + 1, first);\n      if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {\n        let insertedStickySpacer = false;\n        if (stickyIndicesFromProps.size > 0) {\n          const stickyOffset = ListHeaderComponent ? 1 : 0;\n          // See if there are any sticky headers in the virtualized space that we need to render.\n          for (let ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {\n            if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n              const initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n              const stickyBlock = this._getFrameMetricsApprox(ii);\n              const leadSpace =\n                stickyBlock.offset - (initBlock.offset + initBlock.length);\n              cells.push(\n                <View key=\"$sticky_lead\" style={{[spacerKey]: leadSpace}} />,\n              );\n              this._pushCells(\n                cells,\n                stickyHeaderIndices,\n                stickyIndicesFromProps,\n                ii,\n                ii,\n                inversionStyle,\n              );\n              const trailSpace =\n                this._getFrameMetricsApprox(first).offset -\n                (stickyBlock.offset + stickyBlock.length);\n              cells.push(\n                <View key=\"$sticky_trail\" style={{[spacerKey]: trailSpace}} />,\n              );\n              insertedStickySpacer = true;\n              break;\n            }\n          }\n        }\n        if (!insertedStickySpacer) {\n          const initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n          const firstSpace =\n            this._getFrameMetricsApprox(first).offset -\n            (initBlock.offset + initBlock.length);\n          cells.push(\n            <View key=\"$lead_spacer\" style={{[spacerKey]: firstSpace}} />,\n          );\n        }\n      }\n      this._pushCells(\n        cells,\n        stickyHeaderIndices,\n        stickyIndicesFromProps,\n        firstAfterInitial,\n        last,\n        inversionStyle,\n      );\n      if (!this._hasWarned.keys && _usedIndexForKey) {\n        console.warn(\n          'VirtualizedList: missing keys for items, make sure to specify a key property on each ' +\n            'item or provide a custom keyExtractor.',\n        );\n        this._hasWarned.keys = true;\n      }\n      if (!isVirtualizationDisabled && last < itemCount - 1) {\n        const lastFrame = this._getFrameMetricsApprox(last);\n        // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to\n        // prevent the user for hyperscrolling into un-measured area because otherwise content will\n        // likely jump around as it renders in above the viewport.\n        const end = this.props.getItemLayout\n          ? itemCount - 1\n          : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);\n        const endFrame = this._getFrameMetricsApprox(end);\n        const tailSpacerLength =\n          endFrame.offset +\n          endFrame.length -\n          (lastFrame.offset + lastFrame.length);\n        cells.push(\n          <View key=\"$tail_spacer\" style={{[spacerKey]: tailSpacerLength}} />,\n        );\n      }\n    } else if (ListEmptyComponent) {\n      const element = React.isValidElement(ListEmptyComponent)\n        ? ListEmptyComponent // $FlowFixMe\n        : <ListEmptyComponent />;\n      cells.push(\n        <View\n          key=\"$empty\"\n          onLayout={this._onLayoutEmpty}\n          style={inversionStyle}>\n          {element}\n        </View>,\n      );\n    }\n    if (ListFooterComponent) {\n      const element = React.isValidElement(ListFooterComponent)\n        ? ListFooterComponent // $FlowFixMe\n        : <ListFooterComponent />;\n      cells.push(\n        <View\n          key=\"$footer\"\n          onLayout={this._onLayoutFooter}\n          style={inversionStyle}>\n          {element}\n        </View>,\n      );\n    }\n    const scrollProps = {\n      ...this.props,\n      onContentSizeChange: this._onContentSizeChange,\n      onLayout: this._onLayout,\n      onScroll: this._onScroll,\n      onScrollBeginDrag: this._onScrollBeginDrag,\n      onScrollEndDrag: this._onScrollEndDrag,\n      onMomentumScrollEnd: this._onMomentumScrollEnd,\n      scrollEventThrottle: this.props.scrollEventThrottle, // TODO: Android support\n      stickyHeaderIndices,\n    };\n    if (inversionStyle) {\n      scrollProps.style = [inversionStyle, this.props.style];\n    }\n    const ret = React.cloneElement(\n      (this.props.renderScrollComponent || this._defaultRenderScrollComponent)(\n        scrollProps,\n      ),\n      {\n        ref: this._captureScrollRef,\n      },\n      cells,\n    );\n    if (this.props.debug) {\n      return (\n        <View style={{flex: 1}}>\n          {ret}\n          {this._renderDebugOverlay()}\n        </View>\n      );\n    } else {\n      return ret;\n    }\n  }\n\n  componentDidUpdate() {\n    this._scheduleCellsToRenderUpdate();\n  }\n\n  _averageCellLength = 0;\n  _cellRefs = {};\n  _hasDataChangedSinceEndReached = true;\n  _hasWarned = {};\n  _highestMeasuredFrameIndex = 0;\n  _headerLength = 0;\n  _initialScrollIndexTimeout = 0;\n  _fillRateHelper: FillRateHelper;\n  _frames = {};\n  _footerLength = 0;\n  _scrollMetrics = {\n    contentLength: 0,\n    dOffset: 0,\n    dt: 10,\n    offset: 0,\n    timestamp: 0,\n    velocity: 0,\n    visibleLength: 0,\n  };\n  _scrollRef = (null: any);\n  _sentEndForContentLength = 0;\n  _totalCellLength = 0;\n  _totalCellsMeasured = 0;\n  _updateCellsToRenderBatcher: Batchinator;\n  _viewabilityHelper: ViewabilityHelper;\n\n  _captureScrollRef = ref => {\n    this._scrollRef = ref;\n  };\n\n  _computeBlankness() {\n    this._fillRateHelper.computeBlankness(\n      this.props,\n      this.state,\n      this._scrollMetrics,\n    );\n  }\n\n  _defaultRenderScrollComponent = props => {\n    if (this._isNestedWithSameOrientation()) {\n      return <View {...props} />;\n    } else if (props.onRefresh) {\n      invariant(\n        typeof props.refreshing === 'boolean',\n        '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n          JSON.stringify(props.refreshing) +\n          '`',\n      );\n      return (\n        <ScrollView\n          {...props}\n          refreshControl={\n            <RefreshControl\n              refreshing={props.refreshing}\n              onRefresh={props.onRefresh}\n              progressViewOffset={props.progressViewOffset}\n            />\n          }\n        />\n      );\n    } else {\n      return <ScrollView {...props} />;\n    }\n  };\n\n  _onCellLayout(e, cellKey, index) {\n    const layout = e.nativeEvent.layout;\n    const next = {\n      offset: this._selectOffset(layout),\n      length: this._selectLength(layout),\n      index,\n      inLayout: true,\n    };\n    const curr = this._frames[cellKey];\n    if (\n      !curr ||\n      next.offset !== curr.offset ||\n      next.length !== curr.length ||\n      index !== curr.index\n    ) {\n      this._totalCellLength += next.length - (curr ? curr.length : 0);\n      this._totalCellsMeasured += curr ? 0 : 1;\n      this._averageCellLength =\n        this._totalCellLength / this._totalCellsMeasured;\n      this._frames[cellKey] = next;\n      this._highestMeasuredFrameIndex = Math.max(\n        this._highestMeasuredFrameIndex,\n        index,\n      );\n      this._scheduleCellsToRenderUpdate();\n    } else {\n      this._frames[cellKey].inLayout = true;\n    }\n    this._computeBlankness();\n  }\n\n  _onCellUnmount = (cellKey: string) => {\n    const curr = this._frames[cellKey];\n    if (curr) {\n      this._frames[cellKey] = {...curr, inLayout: false};\n    }\n  };\n\n  _onLayout = (e: Object) => {\n    this._scrollMetrics.visibleLength = this._selectLength(\n      e.nativeEvent.layout,\n    );\n    this.props.onLayout && this.props.onLayout(e);\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEndReached();\n  };\n\n  _onLayoutEmpty = e => {\n    this.props.onLayout && this.props.onLayout(e);\n  };\n\n  _onLayoutFooter = e => {\n    this._footerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _onLayoutHeader = e => {\n    this._headerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _renderDebugOverlay() {\n    const normalize =\n      this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;\n    const framesInLayout = [];\n    const itemCount = this.props.getItemCount(this.props.data);\n    for (let ii = 0; ii < itemCount; ii++) {\n      const frame = this._getFrameMetricsApprox(ii);\n      if (frame.inLayout) {\n        framesInLayout.push(frame);\n      }\n    }\n    const windowTop = this._getFrameMetricsApprox(this.state.first).offset;\n    const frameLast = this._getFrameMetricsApprox(this.state.last);\n    const windowLen = frameLast.offset + frameLast.length - windowTop;\n    const visTop = this._scrollMetrics.offset;\n    const visLen = this._scrollMetrics.visibleLength;\n    const baseStyle = {position: 'absolute', top: 0, right: 0};\n    return (\n      <View\n        style={{\n          ...baseStyle,\n          bottom: 0,\n          width: 20,\n          borderColor: 'blue',\n          borderWidth: 1,\n        }}>\n        {framesInLayout.map((f, ii) =>\n          <View\n            key={'f' + ii}\n            style={{\n              ...baseStyle,\n              left: 0,\n              top: f.offset * normalize,\n              height: f.length * normalize,\n              backgroundColor: 'orange',\n            }}\n          />,\n        )}\n        <View\n          style={{\n            ...baseStyle,\n            left: 0,\n            top: windowTop * normalize,\n            height: windowLen * normalize,\n            borderColor: 'green',\n            borderWidth: 2,\n          }}\n        />\n        <View\n          style={{\n            ...baseStyle,\n            left: 0,\n            top: visTop * normalize,\n            height: visLen * normalize,\n            borderColor: 'red',\n            borderWidth: 2,\n          }}\n        />\n      </View>\n    );\n  }\n\n  _selectLength(metrics: {height: number, width: number}): number {\n    return !this.props.horizontal ? metrics.height : metrics.width;\n  }\n\n  _selectOffset(metrics: {x: number, y: number}): number {\n    return !this.props.horizontal ? metrics.y : metrics.x;\n  }\n\n  _maybeCallOnEndReached() {\n    const {\n      data,\n      getItemCount,\n      onEndReached,\n      onEndReachedThreshold,\n    } = this.props;\n    const {contentLength, visibleLength, offset} = this._scrollMetrics;\n    const distanceFromEnd = contentLength - visibleLength - offset;\n    if (\n      onEndReached &&\n      this.state.last === getItemCount(data) - 1 &&\n      distanceFromEnd < onEndReachedThreshold * visibleLength &&\n      (this._hasDataChangedSinceEndReached ||\n        this._scrollMetrics.contentLength !== this._sentEndForContentLength)\n    ) {\n      // Only call onEndReached once for a given dataset + content length.\n      this._hasDataChangedSinceEndReached = false;\n      this._sentEndForContentLength = this._scrollMetrics.contentLength;\n      onEndReached({distanceFromEnd});\n    }\n  }\n\n  _onContentSizeChange = (width: number, height: number) => {\n    if (this.props.onContentSizeChange) {\n      this.props.onContentSizeChange(width, height);\n    }\n    this._scrollMetrics.contentLength = this._selectLength({height, width});\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEndReached();\n  };\n\n  _onScroll = (e: Object) => {\n    if (this.props.onScroll) {\n      this.props.onScroll(e);\n    }\n    const timestamp = e.timeStamp;\n    const visibleLength = this._selectLength(e.nativeEvent.layoutMeasurement);\n    const contentLength = this._selectLength(e.nativeEvent.contentSize);\n    const offset = this._selectOffset(e.nativeEvent.contentOffset);\n    const dt = this._scrollMetrics.timestamp\n      ? Math.max(1, timestamp - this._scrollMetrics.timestamp)\n      : 1;\n    if (\n      dt > 500 &&\n      this._scrollMetrics.dt > 500 &&\n      contentLength > 5 * visibleLength &&\n      !this._hasWarned.perf\n    ) {\n      infoLog(\n        'VirtualizedList: You have a large list that is slow to update - make sure your ' +\n          'renderItem function renders components that follow React performance best practices ' +\n          'like PureComponent, shouldComponentUpdate, etc.',\n        {dt, prevDt: this._scrollMetrics.dt, contentLength},\n      );\n      this._hasWarned.perf = true;\n    }\n    const dOffset = offset - this._scrollMetrics.offset;\n    const velocity = dOffset / dt;\n    this._scrollMetrics = {\n      contentLength,\n      dt,\n      dOffset,\n      offset,\n      timestamp,\n      velocity,\n      visibleLength,\n    };\n    this._updateViewableItems(this.props.data);\n    if (!this.props) {\n      return;\n    }\n    this._maybeCallOnEndReached();\n    if (velocity !== 0) {\n      this._fillRateHelper.activate();\n    }\n    this._computeBlankness();\n    this._scheduleCellsToRenderUpdate();\n  };\n\n  _scheduleCellsToRenderUpdate() {\n    const {first, last} = this.state;\n    const {offset, visibleLength, velocity} = this._scrollMetrics;\n    const itemCount = this.props.getItemCount(this.props.data);\n    let hiPri = false;\n    if (first > 0 || last < itemCount - 1) {\n      const distTop = offset - this._getFrameMetricsApprox(first).offset;\n      const distBottom =\n        this._getFrameMetricsApprox(last).offset - (offset + visibleLength);\n      const scrollingThreshold =\n        this.props.onEndReachedThreshold * visibleLength / 2;\n      hiPri =\n        Math.min(distTop, distBottom) < 0 ||\n        (velocity < -2 && distTop < scrollingThreshold) ||\n        (velocity > 2 && distBottom < scrollingThreshold);\n    }\n    // Only trigger high-priority updates if we've actually rendered cells,\n    // and with that size estimate, accurately compute how many cells we should render.\n    // Otherwise, it would just render as many cells as it can (of zero dimension),\n    // each time through attempting to render more (limited by maxToRenderPerBatch),\n    // starving the renderer from actually laying out the objects and computing _averageCellLength.\n    if (hiPri && this._averageCellLength) {\n      // Don't worry about interactions when scrolling quickly; focus on filling content as fast\n      // as possible.\n      this._updateCellsToRenderBatcher.dispose({abort: true});\n      this._updateCellsToRender();\n      return;\n    } else {\n      this._updateCellsToRenderBatcher.schedule();\n    }\n  }\n\n  _onScrollBeginDrag = (e): void => {\n    this._viewabilityHelper.recordInteraction();\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  _onScrollEndDrag = (e): void => {\n    const {velocity} = e.nativeEvent;\n    if (velocity) {\n      this._scrollMetrics.velocity = this._selectOffset(velocity);\n    }\n    this._computeBlankness();\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  _onMomentumScrollEnd = (e): void => {\n    this._scrollMetrics.velocity = 0;\n    this._computeBlankness();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  _updateCellsToRender = () => {\n    const {data, getItemCount, onEndReachedThreshold} = this.props;\n    const isVirtualizationDisabled = this._isVirtualizationDisabled();\n    this._updateViewableItems(data);\n    if (!data) {\n      return;\n    }\n    this.setState(state => {\n      let newState;\n      if (!isVirtualizationDisabled) {\n        // If we run this with bogus data, we'll force-render window {first: 0, last: 0},\n        // and wipe out the initialNumToRender rendered elements.\n        // So let's wait until the scroll view metrics have been set up. And until then,\n        // we will trust the initialNumToRender suggestion\n        if (this._scrollMetrics.visibleLength) {\n          // If we have a non-zero initialScrollIndex and run this before we've scrolled,\n          // we'll wipe out the initialNumToRender rendered elements starting at initialScrollIndex.\n          // So let's wait until we've scrolled the view to the right place. And until then,\n          // we will trust the initialScrollIndex suggestion.\n          if (!this.props.initialScrollIndex || this._scrollMetrics.offset) {\n            newState = computeWindowedRenderLimits(\n              this.props,\n              state,\n              this._getFrameMetricsApprox,\n              this._scrollMetrics,\n            );\n          }\n        }\n      } else {\n        const {contentLength, offset, visibleLength} = this._scrollMetrics;\n        const distanceFromEnd = contentLength - visibleLength - offset;\n        const renderAhead =\n          distanceFromEnd < onEndReachedThreshold * visibleLength\n            ? this.props.maxToRenderPerBatch\n            : 0;\n        newState = {\n          first: 0,\n          last: Math.min(state.last + renderAhead, getItemCount(data) - 1),\n        };\n      }\n      return newState;\n    });\n  };\n\n  _createViewToken = (index: number, isViewable: boolean) => {\n    const {data, getItem, keyExtractor} = this.props;\n    const item = getItem(data, index);\n    invariant(item, 'Missing item for index ' + index);\n    return {index, item, key: keyExtractor(item, index), isViewable};\n  };\n\n  _getFrameMetricsApprox = (\n    index: number,\n  ): {length: number, offset: number} => {\n    const frame = this._getFrameMetrics(index);\n    if (frame && frame.index === index) {\n      // check for invalid frames due to row re-ordering\n      return frame;\n    } else {\n      const {getItemLayout} = this.props;\n      invariant(\n        !getItemLayout,\n        'Should not have to estimate frames when a measurement metrics function is provided',\n      );\n      return {\n        length: this._averageCellLength,\n        offset: this._averageCellLength * index,\n      };\n    }\n  };\n\n  _getFrameMetrics = (\n    index: number,\n  ): ?{\n    length: number,\n    offset: number,\n    index: number,\n    inLayout?: boolean,\n  } => {\n    const {\n      data,\n      getItem,\n      getItemCount,\n      getItemLayout,\n      keyExtractor,\n    } = this.props;\n    invariant(\n      getItemCount(data) > index,\n      'Tried to get frame for out of range index ' + index,\n    );\n    const item = getItem(data, index);\n    let frame = item && this._frames[keyExtractor(item, index)];\n    if (!frame || frame.index !== index) {\n      if (getItemLayout) {\n        frame = getItemLayout(data, index);\n        if (__DEV__) {\n          const frameType = PropTypes.shape({\n            length: PropTypes.number.isRequired,\n            offset: PropTypes.number.isRequired,\n            index: PropTypes.number.isRequired,\n          }).isRequired;\n          PropTypes.checkPropTypes(\n            {frame: frameType},\n            {frame},\n            'frame',\n            'VirtualizedList.getItemLayout',\n          );\n        }\n      }\n    }\n    return frame;\n  };\n\n  _updateViewableItems(data: any) {\n    const {getItemCount, onViewableItemsChanged} = this.props;\n    if (!onViewableItemsChanged) {\n      return;\n    }\n    this._viewabilityHelper.onUpdate(\n      getItemCount(data),\n      this._scrollMetrics.offset,\n      this._scrollMetrics.visibleLength,\n      this._getFrameMetrics,\n      this._createViewToken,\n      onViewableItemsChanged,\n      this.state,\n    );\n  }\n}\n\nclass CellRenderer extends React.Component {\n  props: {\n    ItemSeparatorComponent: ?ReactClass<*>,\n    cellKey: string,\n    fillRateHelper: FillRateHelper,\n    index: number,\n    inversionStyle: ?StyleObj,\n    item: Item,\n    onLayout: (event: Object) => void, // This is extracted by ScrollViewStickyHeader\n    onUnmount: (cellKey: string) => void,\n    onUpdateSeparators: (cellKeys: Array<?string>, props: Object) => void,\n    parentProps: {\n      getItemLayout?: ?Function,\n      renderItem: renderItemType,\n    },\n    prevCellKey: ?string,\n  };\n\n  state = {\n    separatorProps: {\n      highlighted: false,\n      leadingItem: this.props.item,\n    },\n  };\n\n  // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not\n  // reused by SectionList and we can keep VirtualizedList simpler.\n  _separators = {\n    highlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: true,\n      });\n    },\n    unhighlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {\n        highlighted: false,\n      });\n    },\n    updateProps: (select: 'leading' | 'trailing', newProps: Object) => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators(\n        [select === 'leading' ? prevCellKey : cellKey],\n        newProps,\n      );\n    },\n  };\n\n  updateSeparatorProps(newProps: Object) {\n    this.setState(state => ({\n      separatorProps: {...state.separatorProps, ...newProps},\n    }));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnmount(this.props.cellKey);\n  }\n\n  render() {\n    const {\n      ItemSeparatorComponent,\n      fillRateHelper,\n      item,\n      index,\n      inversionStyle,\n      parentProps,\n    } = this.props;\n    const {renderItem, getItemLayout} = parentProps;\n    invariant(renderItem, 'no renderItem!');\n    const element = renderItem({\n      item,\n      index,\n      separators: this._separators,\n    });\n    const onLayout =\n      getItemLayout && !parentProps.debug && !fillRateHelper.enabled()\n        ? undefined\n        : this.props.onLayout;\n    // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and\n    // called explicitly by `ScrollViewStickyHeader`.\n    return (\n      <View onLayout={onLayout} style={inversionStyle}>\n        {element}\n        {ItemSeparatorComponent &&\n          <ItemSeparatorComponent {...this.state.separatorProps} />}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  verticallyInverted: {\n    transform: [{scaleY: -1}],\n  },\n  horizontallyInverted: {\n    transform: [{scaleX: -1}],\n  },\n});\n\nmodule.exports = VirtualizedList;\n"]}]