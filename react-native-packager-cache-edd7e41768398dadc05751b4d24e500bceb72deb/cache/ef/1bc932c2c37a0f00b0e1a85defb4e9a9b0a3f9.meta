["6067707da60bf3cabb59e78f1bd7937d68443237","9fdb2fedfbdae495231e4304b914a035240a4092",["regenerator-runtime","ImageResizeMode","ImageStylePropTypes","NativeMethodsMixin","NativeModules","React","prop-types","ReactNativeViewAttributes","Set","StyleSheet","StyleSheetPropType","View","ViewPropTypes","ViewStylePropTypes","create-react-class","fbjs/lib/filterObject","flattenStyle","merge","requireNativeComponent","resolveAssetSource"],[49,104,158,215,266,304,338,393,441,474,522,564,601,652,707,757,810,847,894,954],{"version":3,"sources":["/TryOut/node_modules/react-native/Libraries/Image/Image.android.js"],"names":["ImageResizeMode","require","ImageStylePropTypes","NativeMethodsMixin","NativeModules","React","PropTypes","ReactNativeViewAttributes","Set","StyleSheet","StyleSheetPropType","View","ViewPropTypes","ViewStylePropTypes","createReactClass","filterObject","flattenStyle","merge","requireNativeComponent","resolveAssetSource","ImageLoader","_requestId","generateRequestId","ImageViewAttributes","UIView","src","loadingIndicatorSrc","resizeMethod","resizeMode","progressiveRenderingEnabled","fadeDuration","shouldNotifyLoadEvents","ViewStyleKeys","Object","keys","ImageSpecificStyleKeys","filter","has","x","Image","displayName","propTypes","style","source","oneOfType","shape","uri","string","headers","objectOf","number","arrayOf","width","height","blurRadius","loadingIndicatorSource","bool","onLoadStart","func","onError","onLoad","onLoadEnd","testID","oneOf","statics","getSize","url","success","failure","then","sizes","catch","console","warn","prefetch","callback","requestId","prefetchImage","abortPrefetch","abortRequest","queryCache","urls","mixins","viewConfig","uiViewClassName","validAttributes","RCTView","_updateViewConfig","props","children","componentWillMount","componentWillReceiveProps","nextProps","contextTypes","isInAParentText","render","Array","isArray","sources","styles","base","nativeProps","containerStyle","val","key","imageStyle","imageProps","absoluteImage","undefined","context","create","overflow","left","right","top","bottom","position","cfg","nativeOnly","RKImage","RCTTextInlineImage","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Image\n * @flow\n */\n'use strict';\n\nvar ImageResizeMode = require('ImageResizeMode');\nvar ImageStylePropTypes = require('ImageStylePropTypes');\nvar NativeMethodsMixin = require('NativeMethodsMixin');\nvar NativeModules = require('NativeModules');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nvar Set = require('Set');\nvar StyleSheet = require('StyleSheet');\nvar StyleSheetPropType = require('StyleSheetPropType');\nvar View = require('View');\nvar ViewPropTypes = require('ViewPropTypes');\nvar ViewStylePropTypes = require('ViewStylePropTypes');\n\nvar createReactClass = require('create-react-class');\nvar filterObject = require('fbjs/lib/filterObject');\nvar flattenStyle = require('flattenStyle');\nvar merge = require('merge');\nvar requireNativeComponent = require('requireNativeComponent');\nvar resolveAssetSource = require('resolveAssetSource');\n\nvar {\n  ImageLoader,\n} = NativeModules;\n\nlet _requestId = 1;\nfunction generateRequestId() {\n  return _requestId++;\n}\n\n/**\n * <Image> - A react component for displaying different types of images,\n * including network images, static resources, temporary local images, and\n * images from local disk, such as the camera roll.  Example usage:\n *\n *   renderImages: function() {\n *     return (\n *       <View>\n *         <Image\n *           style={styles.icon}\n *           source={require('./myIcon.png')}\n *         />\n *         <Image\n *           style={styles.logo}\n *           source={{uri: 'http://facebook.github.io/react/img/logo_og.png'}}\n *         />\n *       </View>\n *     );\n *   },\n *\n * More example code in ImageExample.js\n */\n\nvar ImageViewAttributes = merge(ReactNativeViewAttributes.UIView, {\n  src: true,\n  loadingIndicatorSrc: true,\n  resizeMethod: true,\n  resizeMode: true,\n  progressiveRenderingEnabled: true,\n  fadeDuration: true,\n  shouldNotifyLoadEvents: true,\n});\n\nvar ViewStyleKeys = new Set(Object.keys(ViewStylePropTypes));\nvar ImageSpecificStyleKeys = new Set(Object.keys(ImageStylePropTypes).filter(x => !ViewStyleKeys.has(x)));\n\nvar Image = createReactClass({\n  displayName: 'Image',\n  propTypes: {\n    ...ViewPropTypes,\n    style: StyleSheetPropType(ImageStylePropTypes),\n   /**\n     * `uri` is a string representing the resource identifier for the image, which\n     * could be an http address, a local file path, or a static image\n     * resource (which should be wrapped in the `require('./path/to/image.png')` function).\n     *\n     * `headers` is an object representing the HTTP headers to send along with the request\n     * for a remote image.\n     *\n     * This prop can also contain several remote `uri`, specified together with\n     * their width and height. The native side will then choose the best `uri` to display\n     * based on the measured size of the image container.\n     */\n    source: PropTypes.oneOfType([\n      PropTypes.shape({\n        uri: PropTypes.string,\n        headers: PropTypes.objectOf(PropTypes.string),\n      }),\n      // Opaque type returned by require('./image.jpg')\n      PropTypes.number,\n      // Multiple sources\n      PropTypes.arrayOf(\n        PropTypes.shape({\n          uri: PropTypes.string,\n          width: PropTypes.number,\n          height: PropTypes.number,\n        }))\n    ]),\n    /**\n    * blurRadius: the blur radius of the blur filter added to the image\n    */\n    blurRadius: PropTypes.number,\n    /**\n     * similarly to `source`, this property represents the resource used to render\n     * the loading indicator for the image, displayed until image is ready to be\n     * displayed, typically after when it got downloaded from network.\n     */\n    loadingIndicatorSource: PropTypes.oneOfType([\n      PropTypes.shape({\n        uri: PropTypes.string,\n      }),\n      // Opaque type returned by require('./image.jpg')\n      PropTypes.number,\n    ]),\n    progressiveRenderingEnabled: PropTypes.bool,\n    fadeDuration: PropTypes.number,\n    /**\n     * Invoked on load start\n     */\n    onLoadStart: PropTypes.func,\n    /**\n     * Invoked on load error\n     */\n    onError: PropTypes.func,\n    /**\n     * Invoked when load completes successfully\n     */\n    onLoad: PropTypes.func,\n    /**\n     * Invoked when load either succeeds or fails\n     */\n    onLoadEnd: PropTypes.func,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n    /**\n     * The mechanism that should be used to resize the image when the image's dimensions\n     * differ from the image view's dimensions. Defaults to `auto`.\n     *\n     * - `auto`: Use heuristics to pick between `resize` and `scale`.\n     *\n     * - `resize`: A software operation which changes the encoded image in memory before it\n     * gets decoded. This should be used instead of `scale` when the image is much larger\n     * than the view.\n     *\n     * - `scale`: The image gets drawn downscaled or upscaled. Compared to `resize`, `scale` is\n     * faster (usually hardware accelerated) and produces higher quality images. This\n     * should be used if the image is smaller than the view. It should also be used if the\n     * image is slightly bigger than the view.\n     *\n     * More details about `resize` and `scale` can be found at http://frescolib.org/docs/resizing-rotating.html.\n     *\n     * @platform android\n     */\n    resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),\n    /**\n     * Determines how to resize the image when the frame doesn't match the raw\n     * image dimensions.\n     *\n     * 'cover': Scale the image uniformly (maintain the image's aspect ratio)\n     * so that both dimensions (width and height) of the image will be equal\n     * to or larger than the corresponding dimension of the view (minus padding).\n     *\n     * 'contain': Scale the image uniformly (maintain the image's aspect ratio)\n     * so that both dimensions (width and height) of the image will be equal to\n     * or less than the corresponding dimension of the view (minus padding).\n     *\n     * 'stretch': Scale width and height independently, This may change the\n     * aspect ratio of the src.\n     *\n     * 'center': Scale the image down so that it is completely visible,\n     * if bigger than the area of the view.\n     * The image will not be scaled up.\n     */\n    resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'center']),\n  },\n\n  statics: {\n    resizeMode: ImageResizeMode,\n\n    getSize(\n      url: string,\n      success: (width: number, height: number) => void,\n      failure?: (error: any) => void,\n    ) {\n      return ImageLoader.getSize(url)\n        .then(function(sizes) {\n          success(sizes.width, sizes.height);\n        })\n        .catch(failure || function() {\n          console.warn('Failed to get size for image: ' + url);\n        });\n    },\n\n    /**\n     * Prefetches a remote image for later use by downloading it to the disk\n     * cache\n     */\n    prefetch(url: string, callback: ?Function) {\n      const requestId = generateRequestId();\n      callback && callback(requestId);\n      return ImageLoader.prefetchImage(url, requestId);\n    },\n\n    /**\n     * Abort prefetch request\n     */\n    abortPrefetch(requestId: number) {\n      ImageLoader.abortRequest(requestId);\n    },\n\n    /**\n     * Perform cache interrogation.\n     *\n     * @param urls the list of image URLs to check the cache for.\n     * @return a mapping from url to cache status, such as \"disk\" or \"memory\". If a requested URL is\n     *         not in the mapping, it means it's not in the cache.\n     */\n    async queryCache(urls: Array<string>): Promise<Map<string, 'memory' | 'disk'>> {\n      return await ImageLoader.queryCache(urls);\n    },\n\n    /**\n     * Resolves an asset reference into an object which has the properties `uri`, `width`,\n     * and `height`. The input may either be a number (opaque type returned by\n     * require('./foo.png')) or an `ImageSource` like { uri: '<http location || file path>' }\n     */\n    resolveAssetSource: resolveAssetSource,\n  },\n\n  mixins: [NativeMethodsMixin],\n\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class. Since it can render\n   * as 3 different native components we need to update viewConfig accordingly\n   */\n  viewConfig: {\n    uiViewClassName: 'RCTView',\n    validAttributes: ReactNativeViewAttributes.RCTView,\n  },\n\n  _updateViewConfig: function(props) {\n    if (props.children) {\n      this.viewConfig = {\n        uiViewClassName: 'RCTView',\n        validAttributes: ReactNativeViewAttributes.RCTView,\n      };\n    } else {\n      this.viewConfig = {\n        uiViewClassName: 'RCTImageView',\n        validAttributes: ImageViewAttributes,\n      };\n    }\n  },\n\n  componentWillMount: function() {\n    this._updateViewConfig(this.props);\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    this._updateViewConfig(nextProps);\n  },\n\n  contextTypes: {\n    isInAParentText: PropTypes.bool\n  },\n\n  render: function() {\n    const source = resolveAssetSource(this.props.source);\n    const loadingIndicatorSource = resolveAssetSource(this.props.loadingIndicatorSource);\n\n    // As opposed to the ios version, here we render `null` when there is no source, source.uri\n    // or source array.\n\n    if (source && source.uri === '') {\n      console.warn('source.uri should not be an empty string');\n    }\n\n    if (this.props.src) {\n      console.warn('The <Image> component requires a `source` property rather than `src`.');\n    }\n\n    if (source && (source.uri || Array.isArray(source))) {\n      let style;\n      let sources;\n      if (source.uri) {\n        const {width, height} = source;\n        style = flattenStyle([{width, height}, styles.base, this.props.style]);\n        sources = [{uri: source.uri}];\n      } else {\n        style = flattenStyle([styles.base, this.props.style]);\n        sources = source;\n      }\n\n      const {onLoadStart, onLoad, onLoadEnd, onError} = this.props;\n      const nativeProps = merge(this.props, {\n        style,\n        shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),\n        src: sources,\n        headers: source.headers,\n        loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null,\n      });\n\n      if (nativeProps.children) {\n        // TODO(6033040): Consider implementing this as a separate native component\n        const containerStyle = filterObject(style, (val, key) => !ImageSpecificStyleKeys.has(key));\n        const imageStyle = filterObject(style, (val, key) => ImageSpecificStyleKeys.has(key));\n        const imageProps = merge(nativeProps, {\n          style: [imageStyle, styles.absoluteImage],\n          children: undefined,\n        });\n\n        return (\n          <View style={containerStyle}>\n            <RKImage {...imageProps}/>\n            {this.props.children}\n          </View>\n        );\n      } else {\n        if (this.context.isInAParentText) {\n          return <RCTTextInlineImage {...nativeProps}/>;\n        } else {\n          return <RKImage {...nativeProps}/>;\n        }\n      }\n    }\n    return null;\n  }\n});\n\nvar styles = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  absoluteImage: {\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    position: 'absolute'\n  }\n});\n\nvar cfg = {\n  nativeOnly: {\n    src: true,\n    headers: true,\n    loadingIndicatorSrc: true,\n    shouldNotifyLoadEvents: true,\n  },\n};\nvar RKImage = requireNativeComponent('RCTImageView', Image, cfg);\nvar RCTTextInlineImage = requireNativeComponent('RCTTextInlineImage', Image, cfg);\n\nmodule.exports = Image;\n"]}]