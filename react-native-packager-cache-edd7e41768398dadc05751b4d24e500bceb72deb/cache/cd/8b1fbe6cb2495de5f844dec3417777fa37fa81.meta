["2b3c95f5bbf19c61224777fda2711a502cf9116a","cef122430d6bfe368e90d2da1d8319981bb6a7d5",["ColorPropType","NativeMethodsMixin","Platform","React","prop-types","ReactNative","StatusBar","StyleSheet","UIManager","View","ViewPropTypes","create-react-class","dismissKeyboard","requireNativeComponent"],[44,95,141,174,208,249,289,328,367,400,437,548,601,658],{"version":3,"sources":["/TryOut/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js"],"names":["ColorPropType","require","NativeMethodsMixin","Platform","React","PropTypes","ReactNative","StatusBar","StyleSheet","UIManager","View","ViewPropTypes","DrawerConsts","AndroidDrawerLayout","Constants","createReactClass","dismissKeyboard","requireNativeComponent","RK_DRAWER_REF","INNERVIEW_REF","DRAWER_STATES","DrawerLayoutAndroid","displayName","statics","positions","DrawerPosition","propTypes","keyboardDismissMode","oneOf","drawerBackgroundColor","drawerPosition","Left","Right","drawerWidth","number","drawerLockMode","onDrawerSlide","func","onDrawerStateChanged","onDrawerOpen","onDrawerClose","renderNavigationView","isRequired","statusBarBackgroundColor","mixins","getDefaultProps","getInitialState","undefined","getInnerViewNode","refs","componentDidMount","_updateStatusBarBackground","componentDidReceiveProps","render","drawStatusBar","Version","props","drawerViewWrapper","styles","drawerSubview","width","backgroundColor","drawerStatusBar","childrenWrapper","mainSubview","state","statusBar","children","base","style","_onDrawerSlide","_onDrawerOpen","_onDrawerClose","_onDrawerStateChanged","event","nativeEvent","drawerState","openDrawer","dispatchViewManagerCommand","_getDrawerLayoutHandle","Commands","closeDrawer","findNodeHandle","requestAnimationFrame","setState","create","flex","elevation","position","top","left","right","bottom","height","currentHeight","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DrawerLayoutAndroid\n */\n'use strict';\n\nvar ColorPropType = require('ColorPropType');\nvar NativeMethodsMixin = require('NativeMethodsMixin');\nvar Platform = require('Platform');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar ReactNative = require('ReactNative');\nvar StatusBar = require('StatusBar');\nvar StyleSheet = require('StyleSheet');\nvar UIManager = require('UIManager');\nvar View = require('View');\nvar ViewPropTypes = require('ViewPropTypes');\n\nvar DrawerConsts = UIManager.AndroidDrawerLayout.Constants;\n\nvar createReactClass = require('create-react-class');\nvar dismissKeyboard = require('dismissKeyboard');\nvar requireNativeComponent = require('requireNativeComponent');\n\nvar RK_DRAWER_REF = 'drawerlayout';\nvar INNERVIEW_REF = 'innerView';\n\nvar DRAWER_STATES = [\n  'Idle',\n  'Dragging',\n  'Settling',\n];\n\n/**\n * React component that wraps the platform `DrawerLayout` (Android only). The\n * Drawer (typically used for navigation) is rendered with `renderNavigationView`\n * and direct children are the main view (where your content goes). The navigation\n * view is initially not visible on the screen, but can be pulled in from the\n * side of the window specified by the `drawerPosition` prop and its width can\n * be set by the `drawerWidth` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   var navigationView = (\n *     <View style={{flex: 1, backgroundColor: '#fff'}}>\n *       <Text style={{margin: 10, fontSize: 15, textAlign: 'left'}}>I'm in the Drawer!</Text>\n *     </View>\n *   );\n *   return (\n *     <DrawerLayoutAndroid\n *       drawerWidth={300}\n *       drawerPosition={DrawerLayoutAndroid.positions.Left}\n *       renderNavigationView={() => navigationView}>\n *       <View style={{flex: 1, alignItems: 'center'}}>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>Hello</Text>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>World!</Text>\n *       </View>\n *     </DrawerLayoutAndroid>\n *   );\n * },\n * ```\n */\nvar DrawerLayoutAndroid = createReactClass({\n  displayName: 'DrawerLayoutAndroid',\n  statics: {\n    positions: DrawerConsts.DrawerPosition,\n  },\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Determines whether the keyboard gets dismissed in response to a drag.\n     *   - 'none' (the default), drags do not dismiss the keyboard.\n     *   - 'on-drag', the keyboard is dismissed when a drag begins.\n     */\n    keyboardDismissMode: PropTypes.oneOf([\n      'none', // default\n      'on-drag',\n    ]),\n    /**\n     * Specifies the background color of the drawer. The default value is white.\n     * If you want to set the opacity of the drawer, use rgba. Example:\n     *\n     * ```\n     * return (\n     *   <DrawerLayoutAndroid drawerBackgroundColor=\"rgba(0,0,0,0.5)\">\n     *   </DrawerLayoutAndroid>\n     * );\n     * ```\n     */\n    drawerBackgroundColor: ColorPropType,\n    /**\n     * Specifies the side of the screen from which the drawer will slide in.\n     */\n    drawerPosition: PropTypes.oneOf([\n      DrawerConsts.DrawerPosition.Left,\n      DrawerConsts.DrawerPosition.Right\n    ]),\n    /**\n     * Specifies the width of the drawer, more precisely the width of the view that be pulled in\n     * from the edge of the window.\n     */\n    drawerWidth: PropTypes.number,\n    /**\n     * Specifies the lock mode of the drawer. The drawer can be locked in 3 states:\n     * - unlocked (default), meaning that the drawer will respond (open/close) to touch gestures.\n     * - locked-closed, meaning that the drawer will stay closed and not respond to gestures.\n     * - locked-open, meaning that the drawer will stay opened and not respond to gestures.\n     * The drawer may still be opened and closed programmatically (`openDrawer`/`closeDrawer`).\n     */\n    drawerLockMode: PropTypes.oneOf([\n      'unlocked',\n      'locked-closed',\n      'locked-open'\n    ]),\n    /**\n     * Function called whenever there is an interaction with the navigation view.\n     */\n    onDrawerSlide: PropTypes.func,\n    /**\n     * Function called when the drawer state has changed. The drawer can be in 3 states:\n     * - idle, meaning there is no interaction with the navigation view happening at the time\n     * - dragging, meaning there is currently an interaction with the navigation view\n     * - settling, meaning that there was an interaction with the navigation view, and the\n     * navigation view is now finishing its closing or opening animation\n     */\n    onDrawerStateChanged: PropTypes.func,\n    /**\n     * Function called whenever the navigation view has been opened.\n     */\n    onDrawerOpen: PropTypes.func,\n    /**\n     * Function called whenever the navigation view has been closed.\n     */\n    onDrawerClose: PropTypes.func,\n    /**\n     * The navigation view that will be rendered to the side of the screen and can be pulled in.\n     */\n    renderNavigationView: PropTypes.func.isRequired,\n\n    /**\n     * Make the drawer take the entire screen and draw the background of the\n     * status bar to allow it to open over the status bar. It will only have an\n     * effect on API 21+.\n     */\n    statusBarBackgroundColor: ColorPropType,\n  },\n\n  mixins: [NativeMethodsMixin],\n\n  getDefaultProps: function(): Object {\n    return {\n      drawerBackgroundColor: 'white',\n    };\n  },\n\n  getInitialState: function() {\n    return {statusBarBackgroundColor: undefined};\n  },\n\n  getInnerViewNode: function() {\n    return this.refs[INNERVIEW_REF].getInnerViewNode();\n  },\n\n  componentDidMount: function() {\n    this._updateStatusBarBackground();\n  },\n\n  componentDidReceiveProps: function() {\n    this._updateStatusBarBackground();\n  },\n\n  render: function() {\n    var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;\n    var drawerViewWrapper =\n      <View\n        style={[\n          styles.drawerSubview,\n          {width: this.props.drawerWidth, backgroundColor: this.props.drawerBackgroundColor}\n        ]}\n        collapsable={false}>\n        {this.props.renderNavigationView()}\n        {drawStatusBar && <View style={styles.drawerStatusBar} />}\n      </View>;\n    var childrenWrapper =\n      <View ref={INNERVIEW_REF} style={styles.mainSubview} collapsable={false}>\n        {drawStatusBar &&\n        <StatusBar\n          translucent\n          backgroundColor={this.state.statusBarBackgroundColor}\n        />}\n        {drawStatusBar &&\n        <View style={[\n          styles.statusBar,\n          {backgroundColor: this.props.statusBarBackgroundColor}\n        ]} />}\n        {this.props.children}\n      </View>;\n    return (\n      <AndroidDrawerLayout\n        {...this.props}\n        ref={RK_DRAWER_REF}\n        drawerWidth={this.props.drawerWidth}\n        drawerPosition={this.props.drawerPosition}\n        drawerLockMode={this.props.drawerLockMode}\n        style={[styles.base, this.props.style]}\n        onDrawerSlide={this._onDrawerSlide}\n        onDrawerOpen={this._onDrawerOpen}\n        onDrawerClose={this._onDrawerClose}\n        onDrawerStateChanged={this._onDrawerStateChanged}>\n        {childrenWrapper}\n        {drawerViewWrapper}\n      </AndroidDrawerLayout>\n    );\n  },\n\n  _onDrawerSlide: function(event) {\n    if (this.props.onDrawerSlide) {\n      this.props.onDrawerSlide(event);\n    }\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      dismissKeyboard();\n    }\n  },\n\n  _onDrawerOpen: function() {\n    if (this.props.onDrawerOpen) {\n      this.props.onDrawerOpen();\n    }\n  },\n\n  _onDrawerClose: function() {\n    if (this.props.onDrawerClose) {\n      this.props.onDrawerClose();\n    }\n  },\n\n  _onDrawerStateChanged: function(event) {\n    if (this.props.onDrawerStateChanged) {\n      this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);\n    }\n  },\n\n  /**\n   * Opens the drawer.\n   */\n  openDrawer: function() {\n    UIManager.dispatchViewManagerCommand(\n      this._getDrawerLayoutHandle(),\n      UIManager.AndroidDrawerLayout.Commands.openDrawer,\n      null\n    );\n  },\n\n  /**\n   * Closes the drawer.\n   */\n  closeDrawer: function() {\n    UIManager.dispatchViewManagerCommand(\n      this._getDrawerLayoutHandle(),\n      UIManager.AndroidDrawerLayout.Commands.closeDrawer,\n      null\n    );\n  },\n\n  _getDrawerLayoutHandle: function() {\n    return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);\n  },\n\n  // Update the StatusBar component background color one frame after creating the\n  // status bar background View to avoid a white flicker that happens because\n  // the StatusBar background becomes transparent before the status bar View\n  // from this component has rendered.\n  _updateStatusBarBackground: function() {\n    if (Platform.Version >= 21 && this.props.statusBarBackgroundColor) {\n      // Check if the value is not already transparent to avoid an extra render.\n      if (this.state.statusBarBackgroundColor !== 'transparent') {\n        requestAnimationFrame(() => {\n          this.setState({statusBarBackgroundColor: 'transparent'});\n        });\n      }\n    } else {\n      this.setState({statusBarBackgroundColor: undefined});\n    }\n  },\n});\n\nvar styles = StyleSheet.create({\n  base: {\n    flex: 1,\n    elevation: 16,\n  },\n  mainSubview: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  drawerSubview: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n  },\n  statusBar: {\n    height: StatusBar.currentHeight,\n  },\n  drawerStatusBar: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    height: StatusBar.currentHeight,\n    backgroundColor: 'rgba(0, 0, 0, 0.251)',\n  },\n});\n\n// The View that contains both the actual drawer and the main view\nvar AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout', DrawerLayoutAndroid);\n\nmodule.exports = DrawerLayoutAndroid;\n"]}]